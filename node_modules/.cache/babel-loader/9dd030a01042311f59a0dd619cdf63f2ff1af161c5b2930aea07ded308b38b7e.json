{"ast":null,"code":"import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool(_ref) {\n  let {\n    accountId,\n    cache = localStorage(),\n    client,\n    customRoleArn,\n    identityPoolId,\n    logins,\n    userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined\n  } = _ref;\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n  let provider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const {\n        IdentityId = throwOnMissingId()\n      } = await client.send(new GetIdCommand({\n        AccountId: accountId,\n        IdentityPoolId: identityPoolId,\n        Logins: logins ? await resolveLogins(logins) : undefined\n      }));\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId\n    });\n    return provider();\n  };\n  return () => provider().catch(async err => {\n    if (cacheKey) {\n      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n    }\n    throw err;\n  });\n}\nfunction throwOnMissingId() {\n  throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"names":["GetIdCommand","CredentialsProviderError","fromCognitoIdentity","localStorage","resolveLogins","fromCognitoIdentityPool","accountId","cache","client","customRoleArn","identityPoolId","logins","userIdentifier","Object","keys","length","undefined","cacheKey","provider","identityId","getItem","IdentityId","throwOnMissingId","send","AccountId","IdentityPoolId","Logins","Promise","resolve","setItem","catch","err","removeItem"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js"],"sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined, }) {\n    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n    let provider = async () => {\n        let identityId = cacheKey && (await cache.getItem(cacheKey));\n        if (!identityId) {\n            const { IdentityId = throwOnMissingId() } = await client.send(new GetIdCommand({\n                AccountId: accountId,\n                IdentityPoolId: identityPoolId,\n                Logins: logins ? await resolveLogins(logins) : undefined,\n            }));\n            identityId = IdentityId;\n            if (cacheKey) {\n                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });\n            }\n        }\n        provider = fromCognitoIdentity({\n            client,\n            customRoleArn,\n            logins,\n            identityId,\n        });\n        return provider();\n    };\n    return () => provider().catch(async (err) => {\n        if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });\n        }\n        throw err;\n    });\n}\nfunction throwOnMissingId() {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kCAAkC;AAC/D,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAO,SAASC,uBAAuB,OAAgL;EAAA,IAA/K;IAAEC,SAAS;IAAEC,KAAK,GAAGJ,YAAY,EAAE;IAAEK,MAAM;IAAEC,aAAa;IAAEC,cAAc;IAAEC,MAAM;IAAEC,cAAc,GAAG,CAACD,MAAM,IAAIE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,KAAK,CAAC,GAAG,WAAW,GAAGC;EAAW,CAAC;EACjN,MAAMC,QAAQ,GAAGL,cAAc,GAAI,oCAAmCF,cAAe,IAAGE,cAAe,EAAC,GAAGI,SAAS;EACpH,IAAIE,QAAQ,GAAG,YAAY;IACvB,IAAIC,UAAU,GAAGF,QAAQ,KAAK,MAAMV,KAAK,CAACa,OAAO,CAACH,QAAQ,CAAC,CAAC;IAC5D,IAAI,CAACE,UAAU,EAAE;MACb,MAAM;QAAEE,UAAU,GAAGC,gBAAgB;MAAG,CAAC,GAAG,MAAMd,MAAM,CAACe,IAAI,CAAC,IAAIvB,YAAY,CAAC;QAC3EwB,SAAS,EAAElB,SAAS;QACpBmB,cAAc,EAAEf,cAAc;QAC9BgB,MAAM,EAAEf,MAAM,GAAG,MAAMP,aAAa,CAACO,MAAM,CAAC,GAAGK;MACnD,CAAC,CAAC,CAAC;MACHG,UAAU,GAAGE,UAAU;MACvB,IAAIJ,QAAQ,EAAE;QACVU,OAAO,CAACC,OAAO,CAACrB,KAAK,CAACsB,OAAO,CAACZ,QAAQ,EAAEE,UAAU,CAAC,CAAC,CAACW,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;MACzE;IACJ;IACAZ,QAAQ,GAAGhB,mBAAmB,CAAC;MAC3BM,MAAM;MACNC,aAAa;MACbE,MAAM;MACNQ;IACJ,CAAC,CAAC;IACF,OAAOD,QAAQ,EAAE;EACrB,CAAC;EACD,OAAO,MAAMA,QAAQ,EAAE,CAACY,KAAK,CAAC,MAAOC,GAAG,IAAK;IACzC,IAAId,QAAQ,EAAE;MACVU,OAAO,CAACC,OAAO,CAACrB,KAAK,CAACyB,UAAU,CAACf,QAAQ,CAAC,CAAC,CAACa,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;IAChE;IACA,MAAMC,GAAG;EACb,CAAC,CAAC;AACN;AACA,SAAST,gBAAgB,GAAG;EACxB,MAAM,IAAIrB,wBAAwB,CAAC,uDAAuD,CAAC;AAC/F"},"metadata":{},"sourceType":"module","externalDependencies":[]}