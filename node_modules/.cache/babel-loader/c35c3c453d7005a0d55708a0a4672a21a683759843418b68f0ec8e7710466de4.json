{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseProvider = void 0;\nconst error_1 = require(\"./error\");\n/** @internal */\nconst kPromise = Symbol('promise');\nconst store = {\n  [kPromise]: null\n};\n/**\n * Global promise store allowing user-provided promises\n * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n * @public\n */\nclass PromiseProvider {\n  /**\n   * Validates the passed in promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static validate(lib) {\n    if (typeof lib !== 'function') throw new error_1.MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n  /**\n   * Sets the promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static set(lib) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (lib === null) {\n      // Check explicitly against null since `.set()` (no args) should fall through to validate\n      store[kPromise] = null;\n      return;\n    }\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n  /**\n   * Get the stored promise library, or resolves passed in\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static get() {\n    return store[kPromise];\n  }\n}\nexports.PromiseProvider = PromiseProvider;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA,MAAMA,QAAQ,GAAGC,MAAM,CAAC,SAAS,CAAC;AAMlC,MAAMC,KAAK,GAAiB;EAC1B,CAACF,QAAQ,GAAG;CACb;AAED;;;;;AAKA,MAAaG,eAAe;EAC1B;;;;EAIA,OAAOC,QAAQ,CAACC,GAAY;IAC1B,IAAI,OAAOA,GAAG,KAAK,UAAU,EAC3B,MAAM,IAAIC,iCAAyB,CAAC,mCAAmCD,GAAG,EAAE,CAAC;IAC/E,OAAO,CAAC,CAACA,GAAG;EACd;EAEA;;;;EAIA,OAAOE,GAAG,CAACF,GAA8B;IACvC;IACA,IAAIA,GAAG,KAAK,IAAI,EAAE;MAChB;MACAH,KAAK,CAACF,QAAQ,CAAC,GAAG,IAAI;MACtB;;IAGF,IAAI,CAACG,eAAe,CAACC,QAAQ,CAACC,GAAG,CAAC,EAAE;MAClC;MACA;;IAEFH,KAAK,CAACF,QAAQ,CAAC,GAAGK,GAAG;EACvB;EAEA;;;;EAIA,OAAOG,GAAG;IACR,OAAON,KAAK,CAACF,QAAQ,CAAC;EACxB;;AApCFS","names":["kPromise","Symbol","store","PromiseProvider","validate","lib","error_1","set","get","exports"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/mongodb/src/promise_provider.ts"],"sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst kPromise = Symbol('promise');\n\ninterface PromiseStore {\n  [kPromise]: PromiseConstructor | null;\n}\n\nconst store: PromiseStore = {\n  [kPromise]: null\n};\n\n/**\n * Global promise store allowing user-provided promises\n * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n * @public\n */\nexport class PromiseProvider {\n  /**\n   * Validates the passed in promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static validate(lib: unknown): lib is PromiseConstructor {\n    if (typeof lib !== 'function')\n      throw new MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n\n  /**\n   * Sets the promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static set(lib: PromiseConstructor | null): void {\n    // eslint-disable-next-line no-restricted-syntax\n    if (lib === null) {\n      // Check explicitly against null since `.set()` (no args) should fall through to validate\n      store[kPromise] = null;\n      return;\n    }\n\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n\n  /**\n   * Get the stored promise library, or resolves passed in\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static get(): PromiseConstructor | null {\n    return store[kPromise];\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}