{"ast":null,"code":"import { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(input) {\n  let str = \"\";\n  for (let i = 0; i < input.length; i += 3) {\n    let bits = 0;\n    let bitLength = 0;\n    for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n      bits |= input[j] << (limit - j - 1) * bitsPerByte;\n      bitLength += bitsPerByte;\n    }\n    const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n    bits <<= bitClusterCount * bitsPerLetter - bitLength;\n    for (let k = 1; k <= bitClusterCount; k++) {\n      const offset = (bitClusterCount - k) * bitsPerLetter;\n      str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n    }\n    str += \"==\".slice(0, 4 - bitClusterCount);\n  }\n  return str;\n}","map":{"version":3,"names":["alphabetByValue","bitsPerByte","bitsPerLetter","maxLetterValue","toBase64","input","str","i","length","bits","bitLength","j","limit","Math","min","bitClusterCount","ceil","k","offset","slice"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-base64/dist-es/toBase64.browser.js"],"sourcesContent":["import { alphabetByValue, bitsPerByte, bitsPerLetter, maxLetterValue } from \"./constants.browser\";\nexport function toBase64(input) {\n    let str = \"\";\n    for (let i = 0; i < input.length; i += 3) {\n        let bits = 0;\n        let bitLength = 0;\n        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n            bits |= input[j] << ((limit - j - 1) * bitsPerByte);\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for (let k = 1; k <= bitClusterCount; k++) {\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,WAAW,EAAEC,aAAa,EAAEC,cAAc,QAAQ,qBAAqB;AACjG,OAAO,SAASC,QAAQ,CAACC,KAAK,EAAE;EAC5B,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIE,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGJ,CAAC,EAAEK,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACP,CAAC,GAAG,CAAC,EAAEF,KAAK,CAACG,MAAM,CAAC,EAAEG,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MACnEF,IAAI,IAAIJ,KAAK,CAACM,CAAC,CAAC,IAAK,CAACC,KAAK,GAAGD,CAAC,GAAG,CAAC,IAAIV,WAAY;MACnDS,SAAS,IAAIT,WAAW;IAC5B;IACA,MAAMc,eAAe,GAAGF,IAAI,CAACG,IAAI,CAACN,SAAS,GAAGR,aAAa,CAAC;IAC5DO,IAAI,KAAKM,eAAe,GAAGb,aAAa,GAAGQ,SAAS;IACpD,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIF,eAAe,EAAEE,CAAC,EAAE,EAAE;MACvC,MAAMC,MAAM,GAAG,CAACH,eAAe,GAAGE,CAAC,IAAIf,aAAa;MACpDI,GAAG,IAAIN,eAAe,CAAC,CAACS,IAAI,GAAIN,cAAc,IAAIe,MAAO,KAAKA,MAAM,CAAC;IACzE;IACAZ,GAAG,IAAI,IAAI,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGJ,eAAe,CAAC;EAC7C;EACA,OAAOT,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}