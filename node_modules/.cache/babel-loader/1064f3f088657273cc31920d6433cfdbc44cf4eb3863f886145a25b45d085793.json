{"ast":null,"code":"const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n  constructor() {\n    let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"aws:cognito-identity-ids\";\n    this.dbName = dbName;\n  }\n  getItem(key) {\n    return this.withObjectStore(\"readonly\", store => {\n      const req = store.get(key);\n      return new Promise(resolve => {\n        req.onerror = () => resolve(null);\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n  removeItem(key) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.delete(key);\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  setItem(id, value) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.put({\n        id,\n        value\n      });\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  getDb() {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  }\n  withObjectStore(mode, action) {\n    return this.getDb().then(db => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n      return new Promise((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(err => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}","map":{"version":3,"names":["STORE_NAME","IndexedDbStorage","constructor","dbName","getItem","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","removeItem","delete","reject","error","setItem","id","put","getDb","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js"],"sourcesContent":["const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n    constructor(dbName = \"aws:cognito-identity-ids\") {\n        this.dbName = dbName;\n    }\n    getItem(key) {\n        return this.withObjectStore(\"readonly\", (store) => {\n            const req = store.get(key);\n            return new Promise((resolve) => {\n                req.onerror = () => resolve(null);\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\n            });\n        }).catch(() => null);\n    }\n    removeItem(key) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.delete(key);\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    setItem(id, value) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.put({ id, value });\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    getDb() {\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\n        return new Promise((resolve, reject) => {\n            openDbRequest.onsuccess = () => {\n                resolve(openDbRequest.result);\n            };\n            openDbRequest.onerror = () => {\n                reject(openDbRequest.error);\n            };\n            openDbRequest.onblocked = () => {\n                reject(new Error(\"Unable to access DB\"));\n            };\n            openDbRequest.onupgradeneeded = () => {\n                const db = openDbRequest.result;\n                db.onerror = () => {\n                    reject(new Error(\"Failed to create object store\"));\n                };\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n            };\n        });\n    }\n    withObjectStore(mode, action) {\n        return this.getDb().then((db) => {\n            const tx = db.transaction(STORE_NAME, mode);\n            tx.oncomplete = () => db.close();\n            return new Promise((resolve, reject) => {\n                tx.onerror = () => reject(tx.error);\n                resolve(action(tx.objectStore(STORE_NAME)));\n            }).catch((err) => {\n                db.close();\n                throw err;\n            });\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}