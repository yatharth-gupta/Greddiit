{"ast":null,"code":"import { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n  const evaluatedTemplateArr = [];\n  const templateContext = {\n    ...options.endpointParams,\n    ...options.referenceRecord\n  };\n  let currentIndex = 0;\n  while (currentIndex < template.length) {\n    const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n    if (openingBraceIndex === -1) {\n      evaluatedTemplateArr.push(template.slice(currentIndex));\n      break;\n    }\n    evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n    const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n    if (closingBraceIndex === -1) {\n      evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n      break;\n    }\n    if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n      evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n      currentIndex = closingBraceIndex + 2;\n    }\n    const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n    if (parameterName.includes(\"#\")) {\n      const [refName, attrName] = parameterName.split(\"#\");\n      evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n    } else {\n      evaluatedTemplateArr.push(templateContext[parameterName]);\n    }\n    currentIndex = closingBraceIndex + 1;\n  }\n  return evaluatedTemplateArr.join(\"\");\n};","map":{"version":3,"names":["getAttr","evaluateTemplate","template","options","evaluatedTemplateArr","templateContext","endpointParams","referenceRecord","currentIndex","length","openingBraceIndex","indexOf","push","slice","closingBraceIndex","parameterName","substring","includes","refName","attrName","split","join"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js"],"sourcesContent":["import { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n    const evaluatedTemplateArr = [];\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    let currentIndex = 0;\n    while (currentIndex < template.length) {\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(currentIndex));\n            break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n            break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n            currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n            const [refName, attrName] = parameterName.split(\"#\");\n            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        }\n        else {\n            evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n    }\n    return evaluatedTemplateArr.join(\"\");\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,QAAQ;AAChC,OAAO,MAAMC,gBAAgB,GAAG,CAACC,QAAQ,EAAEC,OAAO,KAAK;EACnD,MAAMC,oBAAoB,GAAG,EAAE;EAC/B,MAAMC,eAAe,GAAG;IACpB,GAAGF,OAAO,CAACG,cAAc;IACzB,GAAGH,OAAO,CAACI;EACf,CAAC;EACD,IAAIC,YAAY,GAAG,CAAC;EACpB,OAAOA,YAAY,GAAGN,QAAQ,CAACO,MAAM,EAAE;IACnC,MAAMC,iBAAiB,GAAGR,QAAQ,CAACS,OAAO,CAAC,GAAG,EAAEH,YAAY,CAAC;IAC7D,IAAIE,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC1BN,oBAAoB,CAACQ,IAAI,CAACV,QAAQ,CAACW,KAAK,CAACL,YAAY,CAAC,CAAC;MACvD;IACJ;IACAJ,oBAAoB,CAACQ,IAAI,CAACV,QAAQ,CAACW,KAAK,CAACL,YAAY,EAAEE,iBAAiB,CAAC,CAAC;IAC1E,MAAMI,iBAAiB,GAAGZ,QAAQ,CAACS,OAAO,CAAC,GAAG,EAAED,iBAAiB,CAAC;IAClE,IAAII,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC1BV,oBAAoB,CAACQ,IAAI,CAACV,QAAQ,CAACW,KAAK,CAACH,iBAAiB,CAAC,CAAC;MAC5D;IACJ;IACA,IAAIR,QAAQ,CAACQ,iBAAiB,GAAG,CAAC,CAAC,KAAK,GAAG,IAAIR,QAAQ,CAACY,iBAAiB,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;MACpFV,oBAAoB,CAACQ,IAAI,CAACV,QAAQ,CAACW,KAAK,CAACH,iBAAiB,GAAG,CAAC,EAAEI,iBAAiB,CAAC,CAAC;MACnFN,YAAY,GAAGM,iBAAiB,GAAG,CAAC;IACxC;IACA,MAAMC,aAAa,GAAGb,QAAQ,CAACc,SAAS,CAACN,iBAAiB,GAAG,CAAC,EAAEI,iBAAiB,CAAC;IAClF,IAAIC,aAAa,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7B,MAAM,CAACC,OAAO,EAAEC,QAAQ,CAAC,GAAGJ,aAAa,CAACK,KAAK,CAAC,GAAG,CAAC;MACpDhB,oBAAoB,CAACQ,IAAI,CAACZ,OAAO,CAACK,eAAe,CAACa,OAAO,CAAC,EAAEC,QAAQ,CAAC,CAAC;IAC1E,CAAC,MACI;MACDf,oBAAoB,CAACQ,IAAI,CAACP,eAAe,CAACU,aAAa,CAAC,CAAC;IAC7D;IACAP,YAAY,GAAGM,iBAAiB,GAAG,CAAC;EACxC;EACA,OAAOV,oBAAoB,CAACiB,IAAI,CAAC,EAAE,CAAC;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}