{"ast":null,"code":"import partitionsInfo from \"./partitions.json\";\nconst {\n  partitions\n} = partitionsInfo;\nconst DEFAULT_PARTITION = partitions.find(partition => partition.id === \"aws\");\nexport const partition = value => {\n  for (const partition of partitions) {\n    const {\n      regions,\n      outputs\n    } = partition;\n    for (const [region, regionData] of Object.entries(regions)) {\n      if (region === value) {\n        return {\n          ...outputs,\n          ...regionData\n        };\n      }\n    }\n  }\n  for (const partition of partitions) {\n    const {\n      regionRegex,\n      outputs\n    } = partition;\n    if (new RegExp(regionRegex).test(value)) {\n      return {\n        ...outputs\n      };\n    }\n  }\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n  return {\n    ...DEFAULT_PARTITION.outputs\n  };\n};","map":{"version":3,"names":["partitionsInfo","partitions","DEFAULT_PARTITION","find","partition","id","value","regions","outputs","region","regionData","Object","entries","regionRegex","RegExp","test","Error"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"],"sourcesContent":["import partitionsInfo from \"./partitions.json\";\nconst { partitions } = partitionsInfo;\nconst DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\nexport const partition = (value) => {\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,mBAAmB;AAC9C,MAAM;EAAEC;AAAW,CAAC,GAAGD,cAAc;AACrC,MAAME,iBAAiB,GAAGD,UAAU,CAACE,IAAI,CAAEC,SAAS,IAAKA,SAAS,CAACC,EAAE,KAAK,KAAK,CAAC;AAChF,OAAO,MAAMD,SAAS,GAAIE,KAAK,IAAK;EAChC,KAAK,MAAMF,SAAS,IAAIH,UAAU,EAAE;IAChC,MAAM;MAAEM,OAAO;MAAEC;IAAQ,CAAC,GAAGJ,SAAS;IACtC,KAAK,MAAM,CAACK,MAAM,EAAEC,UAAU,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,EAAE;MACxD,IAAIE,MAAM,KAAKH,KAAK,EAAE;QAClB,OAAO;UACH,GAAGE,OAAO;UACV,GAAGE;QACP,CAAC;MACL;IACJ;EACJ;EACA,KAAK,MAAMN,SAAS,IAAIH,UAAU,EAAE;IAChC,MAAM;MAAEY,WAAW;MAAEL;IAAQ,CAAC,GAAGJ,SAAS;IAC1C,IAAI,IAAIU,MAAM,CAACD,WAAW,CAAC,CAACE,IAAI,CAACT,KAAK,CAAC,EAAE;MACrC,OAAO;QACH,GAAGE;MACP,CAAC;IACL;EACJ;EACA,IAAI,CAACN,iBAAiB,EAAE;IACpB,MAAM,IAAIc,KAAK,CAAC,gEAAgE,GAC5E,qDAAqD,CAAC;EAC9D;EACA,OAAO;IACH,GAAGd,iBAAiB,CAACM;EACzB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}