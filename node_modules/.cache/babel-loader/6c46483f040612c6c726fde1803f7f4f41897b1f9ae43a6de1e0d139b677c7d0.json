{"ast":null,"code":"import { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nexport class DefaultRateLimiter {\n  constructor(options) {\n    this.currentCapacity = 0;\n    this.enabled = false;\n    this.lastMaxRate = 0;\n    this.measuredTxRate = 0;\n    this.requestCount = 0;\n    this.lastTimestamp = 0;\n    this.timeWindow = 0;\n    this.beta = options?.beta ?? 0.7;\n    this.minCapacity = options?.minCapacity ?? 1;\n    this.minFillRate = options?.minFillRate ?? 0.5;\n    this.scaleConstant = options?.scaleConstant ?? 0.4;\n    this.smooth = options?.smooth ?? 0.8;\n    const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n    this.lastThrottleTime = currentTimeInSeconds;\n    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n    this.fillRate = this.minFillRate;\n    this.maxCapacity = this.minCapacity;\n  }\n  getCurrentTimeInSeconds() {\n    return Date.now() / 1000;\n  }\n  async getSendToken() {\n    return this.acquireTokenBucket(1);\n  }\n  async acquireTokenBucket(amount) {\n    if (!this.enabled) {\n      return;\n    }\n    this.refillTokenBucket();\n    if (amount > this.currentCapacity) {\n      const delay = (amount - this.currentCapacity) / this.fillRate * 1000;\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    this.currentCapacity = this.currentCapacity - amount;\n  }\n  refillTokenBucket() {\n    const timestamp = this.getCurrentTimeInSeconds();\n    if (!this.lastTimestamp) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n    const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n    this.lastTimestamp = timestamp;\n  }\n  updateClientSendingRate(response) {\n    let calculatedRate;\n    this.updateMeasuredRate();\n    if (isThrottlingError(response)) {\n      const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n      this.lastMaxRate = rateToUse;\n      this.calculateTimeWindow();\n      this.lastThrottleTime = this.getCurrentTimeInSeconds();\n      calculatedRate = this.cubicThrottle(rateToUse);\n      this.enableTokenBucket();\n    } else {\n      this.calculateTimeWindow();\n      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n    }\n    const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n    this.updateTokenBucketRate(newRate);\n  }\n  calculateTimeWindow() {\n    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));\n  }\n  cubicThrottle(rateToUse) {\n    return this.getPrecise(rateToUse * this.beta);\n  }\n  cubicSuccess(timestamp) {\n    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n  }\n  enableTokenBucket() {\n    this.enabled = true;\n  }\n  updateTokenBucketRate(newRate) {\n    this.refillTokenBucket();\n    this.fillRate = Math.max(newRate, this.minFillRate);\n    this.maxCapacity = Math.max(newRate, this.minCapacity);\n    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n  }\n  updateMeasuredRate() {\n    const t = this.getCurrentTimeInSeconds();\n    const timeBucket = Math.floor(t * 2) / 2;\n    this.requestCount++;\n    if (timeBucket > this.lastTxRateBucket) {\n      const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n      this.requestCount = 0;\n      this.lastTxRateBucket = timeBucket;\n    }\n  }\n  getPrecise(num) {\n    return parseFloat(num.toFixed(8));\n  }\n}","map":{"version":3,"names":["isThrottlingError","DefaultRateLimiter","constructor","options","currentCapacity","enabled","lastMaxRate","measuredTxRate","requestCount","lastTimestamp","timeWindow","beta","minCapacity","minFillRate","scaleConstant","smooth","currentTimeInSeconds","getCurrentTimeInSeconds","lastThrottleTime","lastTxRateBucket","Math","floor","fillRate","maxCapacity","Date","now","getSendToken","acquireTokenBucket","amount","refillTokenBucket","delay","Promise","resolve","setTimeout","timestamp","fillAmount","min","updateClientSendingRate","response","calculatedRate","updateMeasuredRate","rateToUse","calculateTimeWindow","cubicThrottle","enableTokenBucket","cubicSuccess","newRate","updateTokenBucketRate","getPrecise","pow","max","t","timeBucket","currentRate","num","parseFloat","toFixed"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-retry/dist-es/DefaultRateLimiter.js"],"sourcesContent":["import { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nexport class DefaultRateLimiter {\n    constructor(options) {\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = options?.beta ?? 0.7;\n        this.minCapacity = options?.minCapacity ?? 1;\n        this.minFillRate = options?.minFillRate ?? 0.5;\n        this.scaleConstant = options?.scaleConstant ?? 0.4;\n        this.smooth = options?.smooth ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1000;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if (isThrottlingError(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,uCAAuC;AACzE,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,eAAe,GAAG,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,aAAa,GAAG,CAAC;IACtB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,IAAI,GAAGR,OAAO,EAAEQ,IAAI,IAAI,GAAG;IAChC,IAAI,CAACC,WAAW,GAAGT,OAAO,EAAES,WAAW,IAAI,CAAC;IAC5C,IAAI,CAACC,WAAW,GAAGV,OAAO,EAAEU,WAAW,IAAI,GAAG;IAC9C,IAAI,CAACC,aAAa,GAAGX,OAAO,EAAEW,aAAa,IAAI,GAAG;IAClD,IAAI,CAACC,MAAM,GAAGZ,OAAO,EAAEY,MAAM,IAAI,GAAG;IACpC,MAAMC,oBAAoB,GAAG,IAAI,CAACC,uBAAuB,EAAE;IAC3D,IAAI,CAACC,gBAAgB,GAAGF,oBAAoB;IAC5C,IAAI,CAACG,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACJ,uBAAuB,EAAE,CAAC;IAClE,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACT,WAAW;IAChC,IAAI,CAACU,WAAW,GAAG,IAAI,CAACX,WAAW;EACvC;EACAK,uBAAuB,GAAG;IACtB,OAAOO,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI;EAC5B;EACA,MAAMC,YAAY,GAAG;IACjB,OAAO,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAAC;EACrC;EACA,MAAMA,kBAAkB,CAACC,MAAM,EAAE;IAC7B,IAAI,CAAC,IAAI,CAACvB,OAAO,EAAE;MACf;IACJ;IACA,IAAI,CAACwB,iBAAiB,EAAE;IACxB,IAAID,MAAM,GAAG,IAAI,CAACxB,eAAe,EAAE;MAC/B,MAAM0B,KAAK,GAAI,CAACF,MAAM,GAAG,IAAI,CAACxB,eAAe,IAAI,IAAI,CAACkB,QAAQ,GAAI,IAAI;MACtE,MAAM,IAAIS,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,KAAK,CAAC,CAAC;IAC9D;IACA,IAAI,CAAC1B,eAAe,GAAG,IAAI,CAACA,eAAe,GAAGwB,MAAM;EACxD;EACAC,iBAAiB,GAAG;IAChB,MAAMK,SAAS,GAAG,IAAI,CAACjB,uBAAuB,EAAE;IAChD,IAAI,CAAC,IAAI,CAACR,aAAa,EAAE;MACrB,IAAI,CAACA,aAAa,GAAGyB,SAAS;MAC9B;IACJ;IACA,MAAMC,UAAU,GAAG,CAACD,SAAS,GAAG,IAAI,CAACzB,aAAa,IAAI,IAAI,CAACa,QAAQ;IACnE,IAAI,CAAClB,eAAe,GAAGgB,IAAI,CAACgB,GAAG,CAAC,IAAI,CAACb,WAAW,EAAE,IAAI,CAACnB,eAAe,GAAG+B,UAAU,CAAC;IACpF,IAAI,CAAC1B,aAAa,GAAGyB,SAAS;EAClC;EACAG,uBAAuB,CAACC,QAAQ,EAAE;IAC9B,IAAIC,cAAc;IAClB,IAAI,CAACC,kBAAkB,EAAE;IACzB,IAAIxC,iBAAiB,CAACsC,QAAQ,CAAC,EAAE;MAC7B,MAAMG,SAAS,GAAG,CAAC,IAAI,CAACpC,OAAO,GAAG,IAAI,CAACE,cAAc,GAAGa,IAAI,CAACgB,GAAG,CAAC,IAAI,CAAC7B,cAAc,EAAE,IAAI,CAACe,QAAQ,CAAC;MACpG,IAAI,CAAChB,WAAW,GAAGmC,SAAS;MAC5B,IAAI,CAACC,mBAAmB,EAAE;MAC1B,IAAI,CAACxB,gBAAgB,GAAG,IAAI,CAACD,uBAAuB,EAAE;MACtDsB,cAAc,GAAG,IAAI,CAACI,aAAa,CAACF,SAAS,CAAC;MAC9C,IAAI,CAACG,iBAAiB,EAAE;IAC5B,CAAC,MACI;MACD,IAAI,CAACF,mBAAmB,EAAE;MAC1BH,cAAc,GAAG,IAAI,CAACM,YAAY,CAAC,IAAI,CAAC5B,uBAAuB,EAAE,CAAC;IACtE;IACA,MAAM6B,OAAO,GAAG1B,IAAI,CAACgB,GAAG,CAACG,cAAc,EAAE,CAAC,GAAG,IAAI,CAAChC,cAAc,CAAC;IACjE,IAAI,CAACwC,qBAAqB,CAACD,OAAO,CAAC;EACvC;EACAJ,mBAAmB,GAAG;IAClB,IAAI,CAAChC,UAAU,GAAG,IAAI,CAACsC,UAAU,CAAC5B,IAAI,CAAC6B,GAAG,CAAE,IAAI,CAAC3C,WAAW,IAAI,CAAC,GAAG,IAAI,CAACK,IAAI,CAAC,GAAI,IAAI,CAACG,aAAa,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EACjH;EACA6B,aAAa,CAACF,SAAS,EAAE;IACrB,OAAO,IAAI,CAACO,UAAU,CAACP,SAAS,GAAG,IAAI,CAAC9B,IAAI,CAAC;EACjD;EACAkC,YAAY,CAACX,SAAS,EAAE;IACpB,OAAO,IAAI,CAACc,UAAU,CAAC,IAAI,CAAClC,aAAa,GAAGM,IAAI,CAAC6B,GAAG,CAACf,SAAS,GAAG,IAAI,CAAChB,gBAAgB,GAAG,IAAI,CAACR,UAAU,EAAE,CAAC,CAAC,GAAG,IAAI,CAACJ,WAAW,CAAC;EACpI;EACAsC,iBAAiB,GAAG;IAChB,IAAI,CAACvC,OAAO,GAAG,IAAI;EACvB;EACA0C,qBAAqB,CAACD,OAAO,EAAE;IAC3B,IAAI,CAACjB,iBAAiB,EAAE;IACxB,IAAI,CAACP,QAAQ,GAAGF,IAAI,CAAC8B,GAAG,CAACJ,OAAO,EAAE,IAAI,CAACjC,WAAW,CAAC;IACnD,IAAI,CAACU,WAAW,GAAGH,IAAI,CAAC8B,GAAG,CAACJ,OAAO,EAAE,IAAI,CAAClC,WAAW,CAAC;IACtD,IAAI,CAACR,eAAe,GAAGgB,IAAI,CAACgB,GAAG,CAAC,IAAI,CAAChC,eAAe,EAAE,IAAI,CAACmB,WAAW,CAAC;EAC3E;EACAiB,kBAAkB,GAAG;IACjB,MAAMW,CAAC,GAAG,IAAI,CAAClC,uBAAuB,EAAE;IACxC,MAAMmC,UAAU,GAAGhC,IAAI,CAACC,KAAK,CAAC8B,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACxC,IAAI,CAAC3C,YAAY,EAAE;IACnB,IAAI4C,UAAU,GAAG,IAAI,CAACjC,gBAAgB,EAAE;MACpC,MAAMkC,WAAW,GAAG,IAAI,CAAC7C,YAAY,IAAI4C,UAAU,GAAG,IAAI,CAACjC,gBAAgB,CAAC;MAC5E,IAAI,CAACZ,cAAc,GAAG,IAAI,CAACyC,UAAU,CAACK,WAAW,GAAG,IAAI,CAACtC,MAAM,GAAG,IAAI,CAACR,cAAc,IAAI,CAAC,GAAG,IAAI,CAACQ,MAAM,CAAC,CAAC;MAC1G,IAAI,CAACP,YAAY,GAAG,CAAC;MACrB,IAAI,CAACW,gBAAgB,GAAGiC,UAAU;IACtC;EACJ;EACAJ,UAAU,CAACM,GAAG,EAAE;IACZ,OAAOC,UAAU,CAACD,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EACrC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}