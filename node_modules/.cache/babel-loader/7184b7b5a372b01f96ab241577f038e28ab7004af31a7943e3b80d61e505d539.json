{"ast":null,"code":"import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n  constructor(_ref) {\n    let {\n      applyChecksum,\n      credentials,\n      region,\n      service,\n      sha256,\n      uriEscapePath = true\n    } = _ref;\n    this.service = service;\n    this.sha256 = sha256;\n    this.uriEscapePath = uriEscapePath;\n    this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n    this.regionProvider = normalizeProvider(region);\n    this.credentialProvider = normalizeProvider(credentials);\n  }\n  async presign(originalRequest) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      signingDate = new Date(),\n      expiresIn = 3600,\n      unsignableHeaders,\n      unhoistableHeaders,\n      signableHeaders,\n      signingRegion,\n      signingService\n    } = options;\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    if (expiresIn > MAX_PRESIGNED_TTL) {\n      return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n    }\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const request = moveHeadersToQuery(prepareRequest(originalRequest), {\n      unhoistableHeaders\n    });\n    if (credentials.sessionToken) {\n      request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n    }\n    request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n    request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n    request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n    request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n    request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n    return request;\n  }\n  async sign(toSign, options) {\n    if (typeof toSign === \"string\") {\n      return this.signString(toSign, options);\n    } else if (toSign.headers && toSign.payload) {\n      return this.signEvent(toSign, options);\n    } else {\n      return this.signRequest(toSign, options);\n    }\n  }\n  async signEvent(_ref2, _ref3) {\n    let {\n      headers,\n      payload\n    } = _ref2;\n    let {\n      signingDate = new Date(),\n      priorSignature,\n      signingRegion,\n      signingService\n    } = _ref3;\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate,\n      longDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    const hashedPayload = await getPayloadHash({\n      headers: {},\n      body: payload\n    }, this.sha256);\n    const hash = new this.sha256();\n    hash.update(headers);\n    const hashedHeaders = toHex(await hash.digest());\n    const stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join(\"\\n\");\n    return this.signString(stringToSign, {\n      signingDate,\n      signingRegion: region,\n      signingService\n    });\n  }\n  async signString(stringToSign) {\n    let {\n      signingDate = new Date(),\n      signingRegion,\n      signingService\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const {\n      shortDate\n    } = formatDate(signingDate);\n    const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  async signRequest(requestToSign) {\n    let {\n      signingDate = new Date(),\n      signableHeaders,\n      unsignableHeaders,\n      signingRegion,\n      signingService\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const credentials = await this.credentialProvider();\n    this.validateResolvedCredentials(credentials);\n    const region = signingRegion ?? (await this.regionProvider());\n    const request = prepareRequest(requestToSign);\n    const {\n      longDate,\n      shortDate\n    } = formatDate(signingDate);\n    const scope = createScope(shortDate, region, signingService ?? this.service);\n    request.headers[AMZ_DATE_HEADER] = longDate;\n    if (credentials.sessionToken) {\n      request.headers[TOKEN_HEADER] = credentials.sessionToken;\n    }\n    const payloadHash = await getPayloadHash(request, this.sha256);\n    if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n      request.headers[SHA256_HEADER] = payloadHash;\n    }\n    const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n    const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n    request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;\n    return request;\n  }\n  createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n    const sortedHeaders = Object.keys(canonicalHeaders).sort();\n    return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map(name => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n  }\n  async createStringToSign(longDate, credentialScope, canonicalRequest) {\n    const hash = new this.sha256();\n    hash.update(toUint8Array(canonicalRequest));\n    const hashedRequest = await hash.digest();\n    return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n  }\n  getCanonicalPath(_ref4) {\n    let {\n      path\n    } = _ref4;\n    if (this.uriEscapePath) {\n      const normalizedPathSegments = [];\n      for (const pathSegment of path.split(\"/\")) {\n        if (pathSegment?.length === 0) continue;\n        if (pathSegment === \".\") continue;\n        if (pathSegment === \"..\") {\n          normalizedPathSegments.pop();\n        } else {\n          normalizedPathSegments.push(pathSegment);\n        }\n      }\n      const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n      const doubleEncoded = encodeURIComponent(normalizedPath);\n      return doubleEncoded.replace(/%2F/g, \"/\");\n    }\n    return path;\n  }\n  async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n    const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n    const hash = new this.sha256(await keyPromise);\n    hash.update(toUint8Array(stringToSign));\n    return toHex(await hash.digest());\n  }\n  getSigningKey(credentials, region, shortDate, service) {\n    return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n  }\n  validateResolvedCredentials(credentials) {\n    if (typeof credentials !== \"object\" || typeof credentials.accessKeyId !== \"string\" || typeof credentials.secretAccessKey !== \"string\") {\n      throw new Error(\"Resolved credential object is not valid\");\n    }\n  }\n}\nconst formatDate = now => {\n  const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n  return {\n    longDate,\n    shortDate: longDate.slice(0, 8)\n  };\n};\nconst getCanonicalHeaderList = headers => Object.keys(headers).sort().join(\";\");","map":{"version":3,"names":["toHex","normalizeProvider","toUint8Array","ALGORITHM_IDENTIFIER","ALGORITHM_QUERY_PARAM","AMZ_DATE_HEADER","AMZ_DATE_QUERY_PARAM","AUTH_HEADER","CREDENTIAL_QUERY_PARAM","EVENT_ALGORITHM_IDENTIFIER","EXPIRES_QUERY_PARAM","MAX_PRESIGNED_TTL","SHA256_HEADER","SIGNATURE_QUERY_PARAM","SIGNED_HEADERS_QUERY_PARAM","TOKEN_HEADER","TOKEN_QUERY_PARAM","createScope","getSigningKey","getCanonicalHeaders","getCanonicalQuery","getPayloadHash","hasHeader","moveHeadersToQuery","prepareRequest","iso8601","SignatureV4","constructor","applyChecksum","credentials","region","service","sha256","uriEscapePath","regionProvider","credentialProvider","presign","originalRequest","options","signingDate","Date","expiresIn","unsignableHeaders","unhoistableHeaders","signableHeaders","signingRegion","signingService","validateResolvedCredentials","longDate","shortDate","formatDate","Promise","reject","scope","request","sessionToken","query","accessKeyId","toString","canonicalHeaders","getCanonicalHeaderList","getSignature","createCanonicalRequest","sign","toSign","signString","headers","payload","signEvent","signRequest","priorSignature","hashedPayload","body","hash","update","hashedHeaders","digest","stringToSign","join","requestToSign","payloadHash","signature","sortedHeaders","Object","keys","sort","method","getCanonicalPath","map","name","createStringToSign","credentialScope","canonicalRequest","hashedRequest","path","normalizedPathSegments","pathSegment","split","length","pop","push","normalizedPath","startsWith","endsWith","doubleEncoded","encodeURIComponent","replace","keyPromise","secretAccessKey","Error","now","slice"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js"],"sourcesContent":["import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider(region);\n        this.credentialProvider = normalizeProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(toUint8Array(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}