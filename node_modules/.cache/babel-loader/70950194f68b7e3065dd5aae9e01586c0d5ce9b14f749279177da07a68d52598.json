{"ast":null,"code":"import { EndpointError } from \"../types\";\nimport { evaluateEndpointRule } from \"./evaluateEndpointRule\";\nimport { evaluateErrorRule } from \"./evaluateErrorRule\";\nimport { evaluateTreeRule } from \"./evaluateTreeRule\";\nexport const evaluateRules = (rules, options) => {\n  for (const rule of rules) {\n    if (rule.type === \"endpoint\") {\n      const endpointOrUndefined = evaluateEndpointRule(rule, options);\n      if (endpointOrUndefined) {\n        return endpointOrUndefined;\n      }\n    } else if (rule.type === \"error\") {\n      evaluateErrorRule(rule, options);\n    } else if (rule.type === \"tree\") {\n      const endpointOrUndefined = evaluateTreeRule(rule, options);\n      if (endpointOrUndefined) {\n        return endpointOrUndefined;\n      }\n    } else {\n      throw new EndpointError(`Unknown endpoint rule: ${rule}`);\n    }\n  }\n  throw new EndpointError(`Rules evaluation failed`);\n};","map":{"version":3,"names":["EndpointError","evaluateEndpointRule","evaluateErrorRule","evaluateTreeRule","evaluateRules","rules","options","rule","type","endpointOrUndefined"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js"],"sourcesContent":["import { EndpointError } from \"../types\";\nimport { evaluateEndpointRule } from \"./evaluateEndpointRule\";\nimport { evaluateErrorRule } from \"./evaluateErrorRule\";\nimport { evaluateTreeRule } from \"./evaluateTreeRule\";\nexport const evaluateRules = (rules, options) => {\n    for (const rule of rules) {\n        if (rule.type === \"endpoint\") {\n            const endpointOrUndefined = evaluateEndpointRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else if (rule.type === \"error\") {\n            evaluateErrorRule(rule, options);\n        }\n        else if (rule.type === \"tree\") {\n            const endpointOrUndefined = evaluateTreeRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else {\n            throw new EndpointError(`Unknown endpoint rule: ${rule}`);\n        }\n    }\n    throw new EndpointError(`Rules evaluation failed`);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AACxC,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,EAAEC,OAAO,KAAK;EAC7C,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACtB,IAAIE,IAAI,CAACC,IAAI,KAAK,UAAU,EAAE;MAC1B,MAAMC,mBAAmB,GAAGR,oBAAoB,CAACM,IAAI,EAAED,OAAO,CAAC;MAC/D,IAAIG,mBAAmB,EAAE;QACrB,OAAOA,mBAAmB;MAC9B;IACJ,CAAC,MACI,IAAIF,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;MAC5BN,iBAAiB,CAACK,IAAI,EAAED,OAAO,CAAC;IACpC,CAAC,MACI,IAAIC,IAAI,CAACC,IAAI,KAAK,MAAM,EAAE;MAC3B,MAAMC,mBAAmB,GAAGN,gBAAgB,CAACI,IAAI,EAAED,OAAO,CAAC;MAC3D,IAAIG,mBAAmB,EAAE;QACrB,OAAOA,mBAAmB;MAC9B;IACJ,CAAC,MACI;MACD,MAAM,IAAIT,aAAa,CAAE,0BAAyBO,IAAK,EAAC,CAAC;IAC7D;EACJ;EACA,MAAM,IAAIP,aAAa,CAAE,yBAAwB,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}