{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst timers_1 = require(\"timers\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../bson\");\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n    super();\n    this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n    // Saving a reference to these BSON functions\n    // supports v2.2.0 and older versions of mongodb-client-encryption\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  connect(options, callback) {\n    var _a;\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const exitWithError = error => callback ? callback(error) : this.emit(Topology.ERROR, error);\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({\n          force: false\n        }, () => exitWithError(err));\n      }\n      // TODO: NODE-2471\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n          stateTransition(this, common_1.STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n          callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n        });\n        return;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      callback === null || callback === void 0 ? void 0 : callback(undefined, this);\n    });\n  }\n  close(options, callback) {\n    options = options !== null && options !== void 0 ? options : {\n      force: false\n    };\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return callback === null || callback === void 0 ? void 0 : callback();\n    }\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return (0, util_1.promisify)(destroyServer)(server, this, {\n        force: !!(options === null || options === void 0 ? void 0 : options.force)\n      });\n    });\n    Promise.all(destroyedServers).then(() => {\n      this.s.servers.clear();\n      stateTransition(this, common_1.STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n      (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n        this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      }\n      this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n      stateTransition(this, common_1.STATE_CLOSED);\n      // emit an event for close\n      this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n    }).finally(() => callback === null || callback === void 0 ? void 0 : callback());\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n  // Sessions related methods\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref() {\n    (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {\n    force: false\n  };\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.s.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.s.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        (0, timers_1.clearTimeout)(waitQueueMember.timer);\n      }\n      waitQueueMember.callback(e);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    if (waitQueueMember.timer) {\n      (0, timers_1.clearTimeout)(waitQueueMember.timer);\n    }\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"mappings":"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","names":["globalTopologyCounter","stateTransition","common_1","kCancelled","Symbol","kWaitQueue","Topology","mongo_types_1","constructor","seeds","options","selectServerAsync","selector","callback","selectServer","bson","Object","create","serialize","bson_1","deserialize","hosts","utils_1","fromString","fromEntries","connection_string_1","entries","Array","isArray","seedlist","seed","push","error_1","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","serverDescriptions","Map","hostAddress","set","toString","server_description_1","s","id","state","description","topology_description_1","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","srvHost","loadBalanced","srvPoller","srv_polling_1","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","events_1","capabilities","ServerCapabilities","lastHello","connect","TOPOLOGY_OPENING","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","exitWithError","error","ERROR","readPreference","read_preference_1","primary","err","server","close","force","skipPingOnConnect","for","command","ping","OPEN","CONNECT","destroyedServers","destroyServer","Promise","all","then","clear","drainWaitQueue","stop","removeListener","TOPOLOGY_CLOSED","finally","serverSelector","translate","assign","isSharded","session","transaction","waitQueueMember","timer","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","SERVER_DESCRIPTION_CHANGED","auth","clientMetadata","metadata","isConnected","isDestroyed","unref","sd","filter","result","maxWireVersion","commonWireVersion","exports","constants_1","topology","removeAllListeners","destroy","SERVER_CLOSED","directConnection","ReplicaSetNoPrimary","LoadBalanced","SERVER_OPENING","server_1","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","hasErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","pool","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","shift","membersToProcess","i","selectedDescriptions","selectedServer","descriptions","server1","server2","operationCount","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/mongodb/src/sdam/topology.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\nimport { promisify } from 'util';\n\nimport type { BSONSerializeOptions, Document } from '../bson';\nimport { deserialize, serialize } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents, DestroyOptions } from '../cmap/connection';\nimport type { CloseOptions, ConnectionPoolEvents } from '../cmap/connection_pool';\nimport { DEFAULT_OPTIONS, FEATURE_FLAGS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoClient, ServerApi } from '../mongo_client';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport type { Transaction } from '../transactions';\nimport {\n  Callback,\n  ClientMetadata,\n  emitWarning,\n  EventEmitterWithState,\n  HostAddress,\n  List,\n  makeStateMachine,\n  ns,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  ClusterTime,\n  drainTimerQueue,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TimerQueue,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport { Server, ServerEvents, ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, ServerSelector } from './server_selection';\nimport { SrvPoller, SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  transaction?: Transaction;\n  callback: ServerSelectionCallback;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @public */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  /** @internal */\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  /** @internal */\n  [featureFlag: symbol]: any;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: List<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  client!: MongoClient;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  /**\n   * @internal\n   *\n   * @privateRemarks\n   * mongodb-client-encryption's class ClientEncryption falls back to finding the bson lib\n   * defined on client.topology.bson, in order to maintain compatibility with any version\n   * of mongodb-client-encryption we keep a reference to serialize and deserialize here.\n   */\n  bson: { serialize: typeof serialize; deserialize: typeof deserialize };\n\n  selectServerAsync: (\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions\n  ) => Promise<Server>;\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds: string | string[] | HostAddress | HostAddress[], options: TopologyOptions) {\n    super();\n\n    this.selectServerAsync = promisify(\n      (\n        selector: string | ReadPreference | ServerSelector,\n        options: SelectServerOptions,\n        callback: (e: Error, r: Server) => void\n      ) => this.selectServer(selector, options, callback as any)\n    );\n\n    // Saving a reference to these BSON functions\n    // supports v2.2.0 and older versions of mongodb-client-encryption\n    this.bson = Object.create(null);\n    this.bson.serialize = serialize;\n    this.bson.deserialize = deserialize;\n\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  connect(callback: Callback): void;\n  connect(options: ConnectOptions, callback: Callback): void;\n  connect(options?: ConnectOptions | Callback, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const exitWithError = (error: Error) =>\n      callback ? callback(error) : this.emit(Topology.ERROR, error);\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        return this.close({ force: false }, () => exitWithError(err));\n      }\n\n      // TODO: NODE-2471\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        server.command(ns('admin.$cmd'), { ping: 1 }, {}, err => {\n          if (err) {\n            return exitWithError(err);\n          }\n\n          stateTransition(this, STATE_CONNECTED);\n          this.emit(Topology.OPEN, this);\n          this.emit(Topology.CONNECT, this);\n\n          callback?.(undefined, this);\n        });\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      callback?.(undefined, this);\n    });\n  }\n\n  /** Close this topology */\n  close(options: CloseOptions): void;\n  close(options: CloseOptions, callback: Callback): void;\n  close(options?: CloseOptions, callback?: Callback): void {\n    options = options ?? { force: false };\n\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return callback?.();\n    }\n\n    const destroyedServers = Array.from(this.s.servers.values(), server => {\n      return promisify(destroyServer)(server, this, { force: !!options?.force });\n    });\n\n    Promise.all(destroyedServers)\n      .then(() => {\n        this.s.servers.clear();\n\n        stateTransition(this, STATE_CLOSING);\n\n        drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n        drainTimerQueue(this.s.connectionTimers);\n\n        if (this.s.srvPoller) {\n          this.s.srvPoller.stop();\n          this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n        }\n\n        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n        stateTransition(this, STATE_CLOSED);\n\n        // emit an event for close\n        this.emit(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n      })\n      .finally(() => callback?.());\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions,\n    callback: Callback<Server>\n  ): void {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport(): boolean {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport(): boolean {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref(): void {\n    emitWarning('`unref` is a noop and will be removed in the next major version');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | null {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(\n  server: Server,\n  topology: Topology,\n  options?: DestroyOptions,\n  callback?: Callback\n) {\n  options = options ?? { force: false };\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(\n      Topology.SERVER_CLOSED,\n      new ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emit(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (\n        incomingServerDescription.error instanceof MongoError &&\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\n      ) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\n          MongoErrorLabel.InterruptInUseConnections\n        );\n\n        server.s.pool.clear({ interruptInUseConnections });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady =\n          incomingServerDescription.isDataBearing ||\n          (incomingServerDescription.type !== ServerType.Unknown &&\n            newTopologyType === TopologyType.Single);\n        if (shouldMarkPoolReady) {\n          server.s.pool.ready();\n        }\n      }\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, err?: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = shuffle(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n\n      selectedServer =\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\n          ? server1\n          : server2;\n    }\n\n    if (!selectedServer) {\n      waitQueueMember.callback(\n        new MongoServerSelectionError(\n          'server selection returned a server description but the server was not found in the topology',\n          topology.description\n        )\n      );\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}