{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = require(\"dns\");\nconst timers_1 = require(\"timers\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n  constructor(srvRecords) {\n    this.srvRecords = srvRecords;\n  }\n  hostnames() {\n    return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n  }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n  constructor(options) {\n    var _a, _b, _c;\n    super();\n    if (!options || !options.srvHost) {\n      throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = (_a = options.srvMaxHosts) !== null && _a !== void 0 ? _a : 0;\n    this.srvServiceName = (_b = options.srvServiceName) !== null && _b !== void 0 ? _b : 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = (_c = options.heartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 10000;\n    this.logger = new logger_1.Logger('srvPoller', options);\n    this.haMode = false;\n    this.generation = 0;\n    this._timeout = undefined;\n  }\n  get srvAddress() {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n  get intervalMS() {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n  start() {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n  stop() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n  schedule() {\n    if (this._timeout) {\n      (0, timers_1.clearTimeout)(this._timeout);\n    }\n    this._timeout = (0, timers_1.setTimeout)(() => {\n      this._poll().catch(unexpectedRuntimeError => {\n        this.logger.error(`Unexpected ${new error_1.MongoRuntimeError(unexpectedRuntimeError).stack}`);\n      });\n    }, this.intervalMS);\n  }\n  success(srvRecords) {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n  failure(message, obj) {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n  parentDomainMismatch(srvRecord) {\n    this.logger.warn(`parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`, srvRecord);\n  }\n  async _poll() {\n    const generation = this.generation;\n    let srvRecords;\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure('DNS error', dnsError);\n      return;\n    }\n    if (generation !== this.generation) {\n      return;\n    }\n    const finalAddresses = [];\n    for (const record of srvRecords) {\n      if (matchesParentDomain(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      } else {\n        this.parentDomainMismatch(record);\n      }\n    }\n    if (!finalAddresses.length) {\n      this.failure('No valid addresses found at host');\n      return;\n    }\n    this.success(finalAddresses);\n  }\n}\nexports.SrvPoller = SrvPoller;\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';","map":{"version":3,"mappings":"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","names":["matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","SrvPollingEvent","constructor","srvRecords","hostnames","Set","map","r","utils_1","fromSrvRecord","toString","exports","SrvPoller","mongo_types_1","options","srvHost","error_1","srvMaxHosts","srvServiceName","rescanSrvIntervalMS","heartbeatFrequencyMS","logger","logger_1","haMode","generation","_timeout","undefined","intervalMS","start","schedule","stop","_poll","catch","unexpectedRuntimeError","error","stack","success","emit","SRV_RECORD_DISCOVERY","failure","message","obj","warn","parentDomainMismatch","srvRecord","name","port","dns","promises","resolveSrv","dnsError","finalAddresses","record","push","length"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/mongodb/src/sdam/srv_polling.ts"],"sourcesContent":["import * as dns from 'dns';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport { MongoRuntimeError } from '../error';\nimport { Logger, LoggerOptions } from '../logger';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { HostAddress } from '../utils';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * @internal\n * @category Event\n */\nexport class SrvPollingEvent {\n  srvRecords: dns.SrvRecord[];\n  constructor(srvRecords: dns.SrvRecord[]) {\n    this.srvRecords = srvRecords;\n  }\n\n  hostnames(): Set<string> {\n    return new Set(this.srvRecords.map(r => HostAddress.fromSrvRecord(r).toString()));\n  }\n}\n\n/** @internal */\nexport interface SrvPollerOptions extends LoggerOptions {\n  srvServiceName: string;\n  srvMaxHosts: number;\n  srvHost: string;\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport type SrvPollerEvents = {\n  srvRecordDiscovery(event: SrvPollingEvent): void;\n};\n\n/** @internal */\nexport class SrvPoller extends TypedEventEmitter<SrvPollerEvents> {\n  srvHost: string;\n  rescanSrvIntervalMS: number;\n  heartbeatFrequencyMS: number;\n  logger: Logger;\n  haMode: boolean;\n  generation: number;\n  srvMaxHosts: number;\n  srvServiceName: string;\n  _timeout?: NodeJS.Timeout;\n\n  /** @event */\n  static readonly SRV_RECORD_DISCOVERY = 'srvRecordDiscovery' as const;\n\n  constructor(options: SrvPollerOptions) {\n    super();\n\n    if (!options || !options.srvHost) {\n      throw new MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n    }\n\n    this.srvHost = options.srvHost;\n    this.srvMaxHosts = options.srvMaxHosts ?? 0;\n    this.srvServiceName = options.srvServiceName ?? 'mongodb';\n    this.rescanSrvIntervalMS = 60000;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n    this.logger = new Logger('srvPoller', options);\n\n    this.haMode = false;\n    this.generation = 0;\n\n    this._timeout = undefined;\n  }\n\n  get srvAddress(): string {\n    return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n  }\n\n  get intervalMS(): number {\n    return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n  }\n\n  start(): void {\n    if (!this._timeout) {\n      this.schedule();\n    }\n  }\n\n  stop(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this.generation += 1;\n      this._timeout = undefined;\n    }\n  }\n\n  schedule(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(() => {\n      this._poll().catch(unexpectedRuntimeError => {\n        this.logger.error(`Unexpected ${new MongoRuntimeError(unexpectedRuntimeError).stack}`);\n      });\n    }, this.intervalMS);\n  }\n\n  success(srvRecords: dns.SrvRecord[]): void {\n    this.haMode = false;\n    this.schedule();\n    this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n  }\n\n  failure(message: string, obj?: NodeJS.ErrnoException): void {\n    this.logger.warn(message, obj);\n    this.haMode = true;\n    this.schedule();\n  }\n\n  parentDomainMismatch(srvRecord: dns.SrvRecord): void {\n    this.logger.warn(\n      `parent domain mismatch on SRV record (${srvRecord.name}:${srvRecord.port})`,\n      srvRecord\n    );\n  }\n\n  async _poll(): Promise<void> {\n    const generation = this.generation;\n    let srvRecords;\n\n    try {\n      srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n    } catch (dnsError) {\n      this.failure('DNS error', dnsError);\n      return;\n    }\n\n    if (generation !== this.generation) {\n      return;\n    }\n\n    const finalAddresses: dns.SrvRecord[] = [];\n    for (const record of srvRecords) {\n      if (matchesParentDomain(record.name, this.srvHost)) {\n        finalAddresses.push(record);\n      } else {\n        this.parentDomainMismatch(record);\n      }\n    }\n\n    if (!finalAddresses.length) {\n      this.failure('No valid addresses found at host');\n      return;\n    }\n\n    this.success(finalAddresses);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}