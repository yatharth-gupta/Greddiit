{"ast":null,"code":"import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = region => {\n  if (typeof region !== \"function\") {\n    return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n  }\n  return async () => {\n    try {\n      return await region();\n    } catch (e) {\n      return ASSUME_ROLE_DEFAULT_REGION;\n    }\n  };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  let closureSourceCreds;\n  return async (sourceCreds, params) => {\n    closureSourceCreds = sourceCreds;\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        credentialDefaultProvider: () => async () => closureSourceCreds,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  return async params => {\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const decorateDefaultCredentialProvider = provider => input => provider({\n  roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n  roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n  ...input\n});","map":{"version":3,"names":["AssumeRoleCommand","AssumeRoleWithWebIdentityCommand","ASSUME_ROLE_DEFAULT_REGION","decorateDefaultRegion","region","undefined","e","getDefaultRoleAssumer","stsOptions","stsClientCtor","stsClient","closureSourceCreds","sourceCreds","params","logger","requestHandler","credentialDefaultProvider","Credentials","send","AccessKeyId","SecretAccessKey","Error","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","getDefaultRoleAssumerWithWebIdentity","decorateDefaultCredentialProvider","provider","input","roleAssumer","roleAssumerWithWebIdentity"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js"],"sourcesContent":["import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = (region) => {\n    if (typeof region !== \"function\") {\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n    }\n    return async () => {\n        try {\n            return await region();\n        }\n        catch (e) {\n            return ASSUME_ROLE_DEFAULT_REGION;\n        }\n    };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}