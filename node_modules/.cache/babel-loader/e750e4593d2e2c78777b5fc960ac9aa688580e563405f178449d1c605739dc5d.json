{"ast":null,"code":"import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = input => {\n  const {\n    region,\n    useFipsEndpoint\n  } = input;\n  if (!region) {\n    throw new Error(\"Region is missing\");\n  }\n  return {\n    ...input,\n    region: async () => {\n      if (typeof region === \"string\") {\n        return getRealRegion(region);\n      }\n      const providedRegion = await region();\n      return getRealRegion(providedRegion);\n    },\n    useFipsEndpoint: async () => {\n      const providedRegion = typeof region === \"string\" ? region : await region();\n      if (isFipsRegion(providedRegion)) {\n        return true;\n      }\n      return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n    }\n  };\n};","map":{"version":3,"names":["getRealRegion","isFipsRegion","resolveRegionConfig","input","region","useFipsEndpoint","Error","providedRegion","Promise","resolve"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"],"sourcesContent":["import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;EAC1C,MAAM;IAAEC,MAAM;IAAEC;EAAgB,CAAC,GAAGF,KAAK;EACzC,IAAI,CAACC,MAAM,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,mBAAmB,CAAC;EACxC;EACA,OAAO;IACH,GAAGH,KAAK;IACRC,MAAM,EAAE,YAAY;MAChB,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC5B,OAAOJ,aAAa,CAACI,MAAM,CAAC;MAChC;MACA,MAAMG,cAAc,GAAG,MAAMH,MAAM,EAAE;MACrC,OAAOJ,aAAa,CAACO,cAAc,CAAC;IACxC,CAAC;IACDF,eAAe,EAAE,YAAY;MACzB,MAAME,cAAc,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,MAAMA,MAAM,EAAE;MAC3E,IAAIH,YAAY,CAACM,cAAc,CAAC,EAAE;QAC9B,OAAO,IAAI;MACf;MACA,OAAO,OAAOF,eAAe,KAAK,UAAU,GAAGG,OAAO,CAACC,OAAO,CAAC,CAAC,CAACJ,eAAe,CAAC,GAAGA,eAAe,EAAE;IACzG;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}