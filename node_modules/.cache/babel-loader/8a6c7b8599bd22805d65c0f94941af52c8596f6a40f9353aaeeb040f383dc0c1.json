{"ast":null,"code":"import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else if (input.regionInfoProvider) {\n    signer = () => normalizeProvider(input.region)().then(async region => [(await input.regionInfoProvider(region, {\n      useFipsEndpoint: await input.useFipsEndpoint(),\n      useDualstackEndpoint: await input.useDualstackEndpoint()\n    })) || {}, region]).then(_ref => {\n      let [regionInfo, region] = _ref;\n      const {\n        signingRegion,\n        signingService\n      } = regionInfo;\n      input.signingRegion = input.signingRegion || signingRegion || region;\n      input.signingName = input.signingName || signingService || input.serviceId;\n      const params = {\n        ...input,\n        credentials: normalizedCreds,\n        region: input.signingRegion,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = input.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    });\n  } else {\n    signer = async authScheme => {\n      authScheme = Object.assign({}, {\n        name: \"sigv4\",\n        signingName: input.signingName || input.defaultSigningName,\n        signingRegion: await normalizeProvider(input.region)(),\n        properties: {}\n      }, authScheme);\n      const signingRegion = authScheme.signingRegion;\n      const signingService = authScheme.signingName;\n      input.signingRegion = input.signingRegion || signingRegion;\n      input.signingName = input.signingName || signingService || input.serviceId;\n      const params = {\n        ...input,\n        credentials: normalizedCreds,\n        region: input.signingRegion,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = input.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    };\n  }\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\nexport const resolveSigV4AuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(new SignatureV4({\n      credentials: normalizedCreds,\n      region: input.region,\n      service: input.signingName,\n      sha256,\n      uriEscapePath: signingEscapePath\n    }));\n  }\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\nconst normalizeCredentialProvider = credentials => {\n  if (typeof credentials === \"function\") {\n    return memoize(credentials, credentials => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, credentials => credentials.expiration !== undefined);\n  }\n  return normalizeProvider(credentials);\n};","map":{"version":3,"names":["memoize","SignatureV4","normalizeProvider","CREDENTIAL_EXPIRE_WINDOW","resolveAwsAuthConfig","input","normalizedCreds","credentials","normalizeCredentialProvider","credentialDefaultProvider","signingEscapePath","systemClockOffset","sha256","signer","regionInfoProvider","region","then","useFipsEndpoint","useDualstackEndpoint","regionInfo","signingRegion","signingService","signingName","serviceId","params","service","uriEscapePath","SignerCtor","signerConstructor","authScheme","Object","assign","name","defaultSigningName","properties","resolveSigV4AuthConfig","expiration","undefined","getTime","Date","now"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js"],"sourcesContent":["import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else if (input.regionInfoProvider) {\n        signer = () => normalizeProvider(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: input.signingName || input.defaultSigningName,\n                signingRegion: await normalizeProvider(input.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            input.signingRegion = input.signingRegion || signingRegion;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexport const resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = normalizeProvider(new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return memoize(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return normalizeProvider(credentials);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}