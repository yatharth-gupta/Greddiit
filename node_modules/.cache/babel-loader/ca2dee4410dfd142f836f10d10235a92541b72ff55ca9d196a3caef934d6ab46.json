{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = require(\"../error\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n  constructor(pool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n  get name() {\n    return 'MongoPoolClosedError';\n  }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n  constructor(pool, message) {\n    var _a;\n    const errorMessage = message ? message : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${(_a = pool.serverError) === null || _a === void 0 ? void 0 : _a.message}\"`;\n    super(errorMessage);\n    this.address = pool.address;\n    this.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n  }\n  get name() {\n    return 'MongoPoolClearedError';\n  }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n  constructor(pool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n  get name() {\n    return 'PoolClearedOnNetworkError';\n  }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n  constructor(message, address) {\n    super(message);\n    this.address = address;\n  }\n  get name() {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;","map":{"version":3,"mappings":";;;;;;AAAA;AAGA;;;;AAIA,MAAaA,eAAgB,SAAQC,wBAAgB;EAInDC,YAAYC,IAAoB;IAC9B,KAAK,CAAC,iEAAiE,CAAC;IACxE,IAAI,CAACC,OAAO,GAAGD,IAAI,CAACC,OAAO;EAC7B;EAEA,IAAaC,IAAI;IACf,OAAO,sBAAsB;EAC/B;;AAXFC;AAcA;;;;AAIA,MAAaC,gBAAiB,SAAQN,yBAAiB;EAIrDC,YAAYC,IAAoB,EAAEK,OAAgB;;IAChD,MAAMC,YAAY,GAAGD,OAAO,GACxBA,OAAO,GACP,uBAAuBL,IAAI,CAACC,OAAO,wDAAwD,UAAI,CAACM,WAAW,0CAAEF,OAAO,GAAG;IAC3H,KAAK,CAACC,YAAY,CAAC;IACnB,IAAI,CAACL,OAAO,GAAGD,IAAI,CAACC,OAAO;IAE3B,IAAI,CAACO,aAAa,CAACV,uBAAe,CAACW,mBAAmB,CAAC;EACzD;EAEA,IAAaP,IAAI;IACf,OAAO,uBAAuB;EAChC;;AAhBFC;AAmBA;;;;AAIA,MAAaO,yBAA0B,SAAQN,gBAAgB;EAC7DL,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,EAAE,iBAAiBA,IAAI,CAACC,OAAO,4CAA4C,CAAC;EACxF;EAEA,IAAaC,IAAI;IACf,OAAO,2BAA2B;EACpC;;AAPFC;AAUA;;;;AAIA,MAAaQ,qBAAsB,SAAQb,wBAAgB;EAIzDC,YAAYM,OAAe,EAAEJ,OAAe;IAC1C,KAAK,CAACI,OAAO,CAAC;IACd,IAAI,CAACJ,OAAO,GAAGA,OAAO;EACxB;EAEA,IAAaC,IAAI;IACf,OAAO,4BAA4B;EACrC;;AAXFC","names":["PoolClosedError","error_1","constructor","pool","address","name","exports","PoolClearedError","message","errorMessage","serverError","addErrorLabel","RetryableWriteError","PoolClearedOnNetworkError","WaitQueueTimeoutError"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/mongodb/src/cmap/errors.ts"],"sourcesContent":["import { MongoDriverError, MongoErrorLabel, MongoNetworkError } from '../error';\nimport type { ConnectionPool } from './connection_pool';\n\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nexport class PoolClosedError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClosedError';\n  }\n}\n\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nexport class PoolClearedError extends MongoNetworkError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(pool: ConnectionPool, message?: string) {\n    const errorMessage = message\n      ? message\n      : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage);\n    this.address = pool.address;\n\n    this.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n  }\n\n  override get name(): string {\n    return 'MongoPoolClearedError';\n  }\n}\n\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nexport class PoolClearedOnNetworkError extends PoolClearedError {\n  constructor(pool: ConnectionPool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n\n  override get name(): string {\n    return 'PoolClearedOnNetworkError';\n  }\n}\n\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nexport class WaitQueueTimeoutError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  constructor(message: string, address: string) {\n    super(message);\n    this.address = address;\n  }\n\n  override get name(): string {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}