{"ast":null,"code":"import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { deserializeAws_queryAssumeRoleWithWebIdentityCommand, serializeAws_queryAssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleWithWebIdentityCommand extends $Command {\n  constructor(input) {\n    super();\n    this.input = input;\n  }\n  static getEndpointParameterInstructions() {\n    return {\n      UseGlobalEndpoint: {\n        type: \"builtInParams\",\n        name: \"useGlobalEndpoint\"\n      },\n      UseFIPS: {\n        type: \"builtInParams\",\n        name: \"useFipsEndpoint\"\n      },\n      Endpoint: {\n        type: \"builtInParams\",\n        name: \"endpoint\"\n      },\n      Region: {\n        type: \"builtInParams\",\n        name: \"region\"\n      },\n      UseDualStack: {\n        type: \"builtInParams\",\n        name: \"useDualstackEndpoint\"\n      }\n    };\n  }\n  resolveMiddleware(clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const {\n      logger\n    } = configuration;\n    const clientName = \"STSClient\";\n    const commandName = \"AssumeRoleWithWebIdentityCommand\";\n    const handlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: AssumeRoleWithWebIdentityRequestFilterSensitiveLog,\n      outputFilterSensitiveLog: AssumeRoleWithWebIdentityResponseFilterSensitiveLog\n    };\n    const {\n      requestHandler\n    } = configuration;\n    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n  }\n  serialize(input, context) {\n    return serializeAws_queryAssumeRoleWithWebIdentityCommand(input, context);\n  }\n  deserialize(output, context) {\n    return deserializeAws_queryAssumeRoleWithWebIdentityCommand(output, context);\n  }\n}","map":{"version":3,"names":["getEndpointPlugin","getSerdePlugin","Command","$Command","AssumeRoleWithWebIdentityRequestFilterSensitiveLog","AssumeRoleWithWebIdentityResponseFilterSensitiveLog","deserializeAws_queryAssumeRoleWithWebIdentityCommand","serializeAws_queryAssumeRoleWithWebIdentityCommand","AssumeRoleWithWebIdentityCommand","constructor","input","getEndpointParameterInstructions","UseGlobalEndpoint","type","name","UseFIPS","Endpoint","Region","UseDualStack","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js"],"sourcesContent":["import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { deserializeAws_queryAssumeRoleWithWebIdentityCommand, serializeAws_queryAssumeRoleWithWebIdentityCommand, } from \"../protocols/Aws_query\";\nexport class AssumeRoleWithWebIdentityCommand extends $Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    static getEndpointParameterInstructions() {\n        return {\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleWithWebIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: AssumeRoleWithWebIdentityRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: AssumeRoleWithWebIdentityResponseFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return serializeAws_queryAssumeRoleWithWebIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return deserializeAws_queryAssumeRoleWithWebIdentityCommand(output, context);\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAC5D,SAASC,kDAAkD,EAAEC,mDAAmD,QAAS,oBAAoB;AAC7I,SAASC,oDAAoD,EAAEC,kDAAkD,QAAS,wBAAwB;AAClJ,OAAO,MAAMC,gCAAgC,SAASL,QAAQ,CAAC;EAC3DM,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA,OAAOC,gCAAgC,GAAG;IACtC,OAAO;MACHC,iBAAiB,EAAE;QAAEC,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAoB,CAAC;MACvEC,OAAO,EAAE;QAAEF,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAkB,CAAC;MAC3DE,QAAQ,EAAE;QAAEH,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAW,CAAC;MACrDG,MAAM,EAAE;QAAEJ,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAS,CAAC;MACjDI,YAAY,EAAE;QAAEL,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAuB;IACxE,CAAC;EACL;EACAK,iBAAiB,CAACC,WAAW,EAAEC,aAAa,EAAEC,OAAO,EAAE;IACnD,IAAI,CAACC,eAAe,CAACC,GAAG,CAACvB,cAAc,CAACoB,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IACzF,IAAI,CAACH,eAAe,CAACC,GAAG,CAACxB,iBAAiB,CAACqB,aAAa,EAAEb,gCAAgC,CAACG,gCAAgC,EAAE,CAAC,CAAC;IAC/H,MAAMgB,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IACtD,MAAM;MAAEM;IAAO,CAAC,GAAGR,aAAa;IAChC,MAAMS,UAAU,GAAG,WAAW;IAC9B,MAAMC,WAAW,GAAG,kCAAkC;IACtD,MAAMC,uBAAuB,GAAG;MAC5BH,MAAM;MACNC,UAAU;MACVC,WAAW;MACXE,uBAAuB,EAAE7B,kDAAkD;MAC3E8B,wBAAwB,EAAE7B;IAC9B,CAAC;IACD,MAAM;MAAE8B;IAAe,CAAC,GAAGd,aAAa;IACxC,OAAOM,KAAK,CAACS,OAAO,CAAEC,OAAO,IAAKF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAO,EAAEf,OAAO,IAAI,CAAC,CAAC,CAAC,EAAEU,uBAAuB,CAAC;EACrH;EACAP,SAAS,CAACf,KAAK,EAAE6B,OAAO,EAAE;IACtB,OAAOhC,kDAAkD,CAACG,KAAK,EAAE6B,OAAO,CAAC;EAC7E;EACAb,WAAW,CAACc,MAAM,EAAED,OAAO,EAAE;IACzB,OAAOjC,oDAAoD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAChF;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}