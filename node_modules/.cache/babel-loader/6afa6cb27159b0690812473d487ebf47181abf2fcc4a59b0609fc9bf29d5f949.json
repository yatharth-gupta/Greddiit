{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport const getDefaultRetryQuota = (initialRetryTokens, options) => {\n  const MAX_CAPACITY = initialRetryTokens;\n  const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n  const retryCost = options?.retryCost ?? RETRY_COST;\n  const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n  let availableCapacity = initialRetryTokens;\n  const getCapacityAmount = error => error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost;\n  const hasRetryTokens = error => getCapacityAmount(error) <= availableCapacity;\n  const retrieveRetryTokens = error => {\n    if (!hasRetryTokens(error)) {\n      throw new Error(\"No retry token available\");\n    }\n    const capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n  const releaseRetryTokens = capacityReleaseAmount => {\n    availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n  return Object.freeze({\n    hasRetryTokens,\n    retrieveRetryTokens,\n    releaseRetryTokens\n  });\n};","map":{"version":3,"names":["NO_RETRY_INCREMENT","RETRY_COST","TIMEOUT_RETRY_COST","getDefaultRetryQuota","initialRetryTokens","options","MAX_CAPACITY","noRetryIncrement","retryCost","timeoutRetryCost","availableCapacity","getCapacityAmount","error","name","hasRetryTokens","retrieveRetryTokens","Error","capacityAmount","releaseRetryTokens","capacityReleaseAmount","Math","min","Object","freeze"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js"],"sourcesContent":["import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport const getDefaultRetryQuota = (initialRetryTokens, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n    const retryCost = options?.retryCost ?? RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;\n    const retrieveRetryTokens = (error) => {\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n    });\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,qBAAqB;AACxF,OAAO,MAAMC,oBAAoB,GAAG,CAACC,kBAAkB,EAAEC,OAAO,KAAK;EACjE,MAAMC,YAAY,GAAGF,kBAAkB;EACvC,MAAMG,gBAAgB,GAAGF,OAAO,EAAEE,gBAAgB,IAAIP,kBAAkB;EACxE,MAAMQ,SAAS,GAAGH,OAAO,EAAEG,SAAS,IAAIP,UAAU;EAClD,MAAMQ,gBAAgB,GAAGJ,OAAO,EAAEI,gBAAgB,IAAIP,kBAAkB;EACxE,IAAIQ,iBAAiB,GAAGN,kBAAkB;EAC1C,MAAMO,iBAAiB,GAAIC,KAAK,IAAMA,KAAK,CAACC,IAAI,KAAK,cAAc,GAAGJ,gBAAgB,GAAGD,SAAU;EACnG,MAAMM,cAAc,GAAIF,KAAK,IAAKD,iBAAiB,CAACC,KAAK,CAAC,IAAIF,iBAAiB;EAC/E,MAAMK,mBAAmB,GAAIH,KAAK,IAAK;IACnC,IAAI,CAACE,cAAc,CAACF,KAAK,CAAC,EAAE;MACxB,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IACA,MAAMC,cAAc,GAAGN,iBAAiB,CAACC,KAAK,CAAC;IAC/CF,iBAAiB,IAAIO,cAAc;IACnC,OAAOA,cAAc;EACzB,CAAC;EACD,MAAMC,kBAAkB,GAAIC,qBAAqB,IAAK;IAClDT,iBAAiB,IAAIS,qBAAqB,IAAIZ,gBAAgB;IAC9DG,iBAAiB,GAAGU,IAAI,CAACC,GAAG,CAACX,iBAAiB,EAAEJ,YAAY,CAAC;EACjE,CAAC;EACD,OAAOgB,MAAM,CAACC,MAAM,CAAC;IACjBT,cAAc;IACdC,mBAAmB;IACnBG;EACJ,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}