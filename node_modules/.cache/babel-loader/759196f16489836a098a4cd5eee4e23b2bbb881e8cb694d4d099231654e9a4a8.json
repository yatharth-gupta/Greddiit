{"ast":null,"code":"import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTime as __parseRfc3339DateTime, strictParseInt32 as __strictParseInt32, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const serializeAws_queryAssumeRoleCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleRequest(input, context),\n    Action: \"AssumeRole\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n    Action: \"AssumeRoleWithSAML\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n    Action: \"AssumeRoleWithWebIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n    Action: \"DecodeAuthorizationMessage\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n    Action: \"GetAccessKeyInfo\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetCallerIdentityRequest(input, context),\n    Action: \"GetCallerIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetFederationTokenRequest(input, context),\n    Action: \"GetFederationToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetSessionTokenRequest(input, context),\n    Action: \"GetSessionToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPCommunicationError\":\n    case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n      throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidAuthorizationMessageException\":\n    case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n      throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetFederationTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetSessionTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n  const exception = new ExpiredTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n  const exception = new IDPCommunicationErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n  const exception = new IDPRejectedClaimException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n  const exception = new InvalidAuthorizationMessageException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n  const exception = new InvalidIdentityTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n  const exception = new MalformedPolicyDocumentException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n  const exception = new PackedPolicyTooLargeException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n  const exception = new RegionDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref => {\n      let [key, value] = _ref;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.TransitiveTagKeys != null) {\n    const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n    if (input.TransitiveTagKeys?.length === 0) {\n      entries.TransitiveTagKeys = [];\n    }\n    Object.entries(memberEntries).forEach(_ref3 => {\n      let [key, value] = _ref3;\n      const loc = `TransitiveTagKeys.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.ExternalId != null) {\n    entries[\"ExternalId\"] = input.ExternalId;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  if (input.SourceIdentity != null) {\n    entries[\"SourceIdentity\"] = input.SourceIdentity;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.PrincipalArn != null) {\n    entries[\"PrincipalArn\"] = input.PrincipalArn;\n  }\n  if (input.SAMLAssertion != null) {\n    entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.WebIdentityToken != null) {\n    entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n  }\n  if (input.ProviderId != null) {\n    entries[\"ProviderId\"] = input.ProviderId;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n  const entries = {};\n  if (input.EncodedMessage != null) {\n    entries[\"EncodedMessage\"] = input.EncodedMessage;\n  }\n  return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n  const entries = {};\n  if (input.AccessKeyId != null) {\n    entries[\"AccessKeyId\"] = input.AccessKeyId;\n  }\n  return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n  const entries = {};\n  return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.Name != null) {\n    entries[\"Name\"] = input.Name;\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref6 => {\n      let [key, value] = _ref6;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref7 => {\n      let [key, value] = _ref7;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n    Object.entries(memberEntries).forEach(_ref8 => {\n      let [key, value] = _ref8;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n  const entries = {};\n  if (input.arn != null) {\n    entries[\"arn\"] = input.arn;\n  }\n  return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n  const entries = {};\n  if (input.Key != null) {\n    entries[\"Key\"] = input.Key;\n  }\n  if (input.Value != null) {\n    entries[\"Value\"] = input.Value;\n  }\n  return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryTag(entry, context);\n    Object.entries(memberEntries).forEach(_ref9 => {\n      let [key, value] = _ref9;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n  const contents = {\n    AssumedRoleId: undefined,\n    Arn: undefined\n  };\n  if (output[\"AssumedRoleId\"] !== undefined) {\n    contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Subject: undefined,\n    SubjectType: undefined,\n    Issuer: undefined,\n    Audience: undefined,\n    NameQualifier: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Subject\"] !== undefined) {\n    contents.Subject = __expectString(output[\"Subject\"]);\n  }\n  if (output[\"SubjectType\"] !== undefined) {\n    contents.SubjectType = __expectString(output[\"SubjectType\"]);\n  }\n  if (output[\"Issuer\"] !== undefined) {\n    contents.Issuer = __expectString(output[\"Issuer\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n  if (output[\"NameQualifier\"] !== undefined) {\n    contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    SubjectFromWebIdentityToken: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Provider: undefined,\n    Audience: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n    contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Provider\"] !== undefined) {\n    contents.Provider = __expectString(output[\"Provider\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n  const contents = {\n    AccessKeyId: undefined,\n    SecretAccessKey: undefined,\n    SessionToken: undefined,\n    Expiration: undefined\n  };\n  if (output[\"AccessKeyId\"] !== undefined) {\n    contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n  }\n  if (output[\"SecretAccessKey\"] !== undefined) {\n    contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n  }\n  if (output[\"SessionToken\"] !== undefined) {\n    contents.SessionToken = __expectString(output[\"SessionToken\"]);\n  }\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = __expectNonNull(__parseRfc3339DateTime(output[\"Expiration\"]));\n  }\n  return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n  const contents = {\n    DecodedMessage: undefined\n  };\n  if (output[\"DecodedMessage\"] !== undefined) {\n    contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n  const contents = {\n    FederatedUserId: undefined,\n    Arn: undefined\n  };\n  if (output[\"FederatedUserId\"] !== undefined) {\n    contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n  const contents = {\n    Account: undefined\n  };\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n  const contents = {\n    UserId: undefined,\n    Account: undefined,\n    Arn: undefined\n  };\n  if (output[\"UserId\"] !== undefined) {\n    contents.UserId = __expectString(output[\"UserId\"]);\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    FederatedUser: undefined,\n    PackedPolicySize: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"FederatedUser\"] !== undefined) {\n    contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const contents = {\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n    headers\n  };\n  if (resolvedHostname !== undefined) {\n    contents.hostname = resolvedHostname;\n  }\n  if (body !== undefined) {\n    contents.body = body;\n  }\n  return new __HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return __getValueFromTextNode(parsedObjToReturn);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n  return value;\n};\nconst buildFormUrlencodedString = formEntries => Object.entries(formEntries).map(_ref10 => {\n  let [key, value] = _ref10;\n  return __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value);\n}).join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n  if (data.Error.Code !== undefined) {\n    return data.Error.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","decorateServiceException","__decorateServiceException","expectNonNull","__expectNonNull","expectString","__expectString","extendedEncodeURIComponent","__extendedEncodeURIComponent","getValueFromTextNode","__getValueFromTextNode","parseRfc3339DateTime","__parseRfc3339DateTime","strictParseInt32","__strictParseInt32","throwDefaultError","XMLParser","ExpiredTokenException","IDPCommunicationErrorException","IDPRejectedClaimException","InvalidAuthorizationMessageException","InvalidIdentityTokenException","MalformedPolicyDocumentException","PackedPolicyTooLargeException","RegionDisabledException","STSServiceException","__BaseException","serializeAws_queryAssumeRoleCommand","input","context","headers","body","buildFormUrlencodedString","serializeAws_queryAssumeRoleRequest","Action","Version","buildHttpRpcRequest","undefined","serializeAws_queryAssumeRoleWithSAMLCommand","serializeAws_queryAssumeRoleWithSAMLRequest","serializeAws_queryAssumeRoleWithWebIdentityCommand","serializeAws_queryAssumeRoleWithWebIdentityRequest","serializeAws_queryDecodeAuthorizationMessageCommand","serializeAws_queryDecodeAuthorizationMessageRequest","serializeAws_queryGetAccessKeyInfoCommand","serializeAws_queryGetAccessKeyInfoRequest","serializeAws_queryGetCallerIdentityCommand","serializeAws_queryGetCallerIdentityRequest","serializeAws_queryGetFederationTokenCommand","serializeAws_queryGetFederationTokenRequest","serializeAws_queryGetSessionTokenCommand","serializeAws_queryGetSessionTokenRequest","deserializeAws_queryAssumeRoleCommand","output","statusCode","deserializeAws_queryAssumeRoleCommandError","data","parseBody","contents","deserializeAws_queryAssumeRoleResponse","AssumeRoleResult","response","$metadata","deserializeMetadata","Promise","resolve","parsedOutput","parseErrorBody","errorCode","loadQueryErrorCode","deserializeAws_queryExpiredTokenExceptionResponse","deserializeAws_queryMalformedPolicyDocumentExceptionResponse","deserializeAws_queryPackedPolicyTooLargeExceptionResponse","deserializeAws_queryRegionDisabledExceptionResponse","parsedBody","Error","exceptionCtor","deserializeAws_queryAssumeRoleWithSAMLCommand","deserializeAws_queryAssumeRoleWithSAMLCommandError","deserializeAws_queryAssumeRoleWithSAMLResponse","AssumeRoleWithSAMLResult","deserializeAws_queryIDPRejectedClaimExceptionResponse","deserializeAws_queryInvalidIdentityTokenExceptionResponse","deserializeAws_queryAssumeRoleWithWebIdentityCommand","deserializeAws_queryAssumeRoleWithWebIdentityCommandError","deserializeAws_queryAssumeRoleWithWebIdentityResponse","AssumeRoleWithWebIdentityResult","deserializeAws_queryIDPCommunicationErrorExceptionResponse","deserializeAws_queryDecodeAuthorizationMessageCommand","deserializeAws_queryDecodeAuthorizationMessageCommandError","deserializeAws_queryDecodeAuthorizationMessageResponse","DecodeAuthorizationMessageResult","deserializeAws_queryInvalidAuthorizationMessageExceptionResponse","deserializeAws_queryGetAccessKeyInfoCommand","deserializeAws_queryGetAccessKeyInfoCommandError","deserializeAws_queryGetAccessKeyInfoResponse","GetAccessKeyInfoResult","deserializeAws_queryGetCallerIdentityCommand","deserializeAws_queryGetCallerIdentityCommandError","deserializeAws_queryGetCallerIdentityResponse","GetCallerIdentityResult","deserializeAws_queryGetFederationTokenCommand","deserializeAws_queryGetFederationTokenCommandError","deserializeAws_queryGetFederationTokenResponse","GetFederationTokenResult","deserializeAws_queryGetSessionTokenCommand","deserializeAws_queryGetSessionTokenCommandError","deserializeAws_queryGetSessionTokenResponse","GetSessionTokenResult","deserialized","deserializeAws_queryExpiredTokenException","exception","deserializeAws_queryIDPCommunicationErrorException","deserializeAws_queryIDPRejectedClaimException","deserializeAws_queryInvalidAuthorizationMessageException","deserializeAws_queryInvalidIdentityTokenException","deserializeAws_queryMalformedPolicyDocumentException","deserializeAws_queryPackedPolicyTooLargeException","deserializeAws_queryRegionDisabledException","entries","RoleArn","RoleSessionName","PolicyArns","memberEntries","serializeAws_querypolicyDescriptorListType","length","Object","forEach","key","value","loc","Policy","DurationSeconds","Tags","serializeAws_querytagListType","TransitiveTagKeys","serializeAws_querytagKeyListType","ExternalId","SerialNumber","TokenCode","SourceIdentity","PrincipalArn","SAMLAssertion","WebIdentityToken","ProviderId","EncodedMessage","AccessKeyId","Name","counter","entry","serializeAws_queryPolicyDescriptorType","arn","serializeAws_queryTag","Key","Value","deserializeAws_queryAssumedRoleUser","AssumedRoleId","Arn","Credentials","AssumedRoleUser","PackedPolicySize","deserializeAws_queryCredentials","Subject","SubjectType","Issuer","Audience","NameQualifier","SubjectFromWebIdentityToken","Provider","SecretAccessKey","SessionToken","Expiration","DecodedMessage","message","deserializeAws_queryFederatedUser","FederatedUserId","Account","UserId","FederatedUser","httpStatusCode","requestId","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","path","resolvedHostname","hostname","protocol","port","basePath","endpoint","method","endsWith","slice","encoded","parser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","tagValueProcessor","_","val","trim","includes","addEntity","parsedObj","parse","textNodeName","keys","parsedObjToReturn","errorBody","Message","formEntries","map","join","Code"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js"],"sourcesContent":["import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTime as __parseRfc3339DateTime, strictParseInt32 as __strictParseInt32, throwDefaultError, } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const serializeAws_queryAssumeRoleCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleRequest(input, context),\n        Action: \"AssumeRole\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n        Action: \"AssumeRoleWithSAML\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n        Action: \"AssumeRoleWithWebIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n        Action: \"DecodeAuthorizationMessage\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n        Action: \"GetAccessKeyInfo\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetCallerIdentityRequest(input, context),\n        Action: \"GetCallerIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetFederationTokenRequest(input, context),\n        Action: \"GetFederationToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetSessionTokenRequest(input, context),\n        Action: \"GetSessionToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode,\n    });\n};\nexport const deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetFederationTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nexport const deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetSessionTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                exceptionCtor: __BaseException,\n                errorCode,\n            });\n    }\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n    const exception = new IDPCommunicationErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n    const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n    const exception = new InvalidAuthorizationMessageException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n    const exception = new InvalidIdentityTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n    const exception = new MalformedPolicyDocumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n    const exception = new PackedPolicyTooLargeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n    const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.TransitiveTagKeys != null) {\n        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n        if (input.TransitiveTagKeys?.length === 0) {\n            entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.ExternalId != null) {\n        entries[\"ExternalId\"] = input.ExternalId;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    if (input.SourceIdentity != null) {\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.PrincipalArn != null) {\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\n    }\n    if (input.SAMLAssertion != null) {\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.WebIdentityToken != null) {\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n    }\n    if (input.ProviderId != null) {\n        entries[\"ProviderId\"] = input.ProviderId;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input.EncodedMessage != null) {\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\n    }\n    return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input.AccessKeyId != null) {\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\n    }\n    return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.Name != null) {\n        entries[\"Name\"] = input.Name;\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input.arn != null) {\n        entries[\"arn\"] = input.arn;\n    }\n    return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n    const entries = {};\n    if (input.Key != null) {\n        entries[\"Key\"] = input.Key;\n    }\n    if (input.Value != null) {\n        entries[\"Value\"] = input.Value;\n    }\n    return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryTag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n    const contents = {\n        AssumedRoleId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"AssumedRoleId\"] !== undefined) {\n        contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Subject: undefined,\n        SubjectType: undefined,\n        Issuer: undefined,\n        Audience: undefined,\n        NameQualifier: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Subject\"] !== undefined) {\n        contents.Subject = __expectString(output[\"Subject\"]);\n    }\n    if (output[\"SubjectType\"] !== undefined) {\n        contents.SubjectType = __expectString(output[\"SubjectType\"]);\n    }\n    if (output[\"Issuer\"] !== undefined) {\n        contents.Issuer = __expectString(output[\"Issuer\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"NameQualifier\"] !== undefined) {\n        contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        SubjectFromWebIdentityToken: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Provider: undefined,\n        Audience: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n        contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Provider\"] !== undefined) {\n        contents.Provider = __expectString(output[\"Provider\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n    const contents = {\n        AccessKeyId: undefined,\n        SecretAccessKey: undefined,\n        SessionToken: undefined,\n        Expiration: undefined,\n    };\n    if (output[\"AccessKeyId\"] !== undefined) {\n        contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n    }\n    if (output[\"SecretAccessKey\"] !== undefined) {\n        contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n    }\n    if (output[\"SessionToken\"] !== undefined) {\n        contents.SessionToken = __expectString(output[\"SessionToken\"]);\n    }\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = __expectNonNull(__parseRfc3339DateTime(output[\"Expiration\"]));\n    }\n    return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {\n        DecodedMessage: undefined,\n    };\n    if (output[\"DecodedMessage\"] !== undefined) {\n        contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n    const contents = {\n        FederatedUserId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"FederatedUserId\"] !== undefined) {\n        contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n    const contents = {\n        Account: undefined,\n    };\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n    const contents = {\n        UserId: undefined,\n        Account: undefined,\n        Arn: undefined,\n    };\n    if (output[\"UserId\"] !== undefined) {\n        contents.UserId = __expectString(output[\"UserId\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        FederatedUser: undefined,\n        PackedPolicySize: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"FederatedUser\"] !== undefined) {\n        contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}