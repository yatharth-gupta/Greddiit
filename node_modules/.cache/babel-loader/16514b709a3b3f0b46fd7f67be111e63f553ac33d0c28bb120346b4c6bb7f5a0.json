{"ast":null,"code":"import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = (_ref, unsignableHeaders, signableHeaders) => {\n  let {\n    headers\n  } = _ref;\n  const canonical = {};\n  for (const headerName of Object.keys(headers).sort()) {\n    if (headers[headerName] == undefined) {\n      continue;\n    }\n    const canonicalHeaderName = headerName.toLowerCase();\n    if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n      if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n        continue;\n      }\n    }\n    canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n  }\n  return canonical;\n};","map":{"version":3,"names":["ALWAYS_UNSIGNABLE_HEADERS","PROXY_HEADER_PATTERN","SEC_HEADER_PATTERN","getCanonicalHeaders","unsignableHeaders","signableHeaders","headers","canonical","headerName","Object","keys","sort","undefined","canonicalHeaderName","toLowerCase","has","test","trim","replace"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js"],"sourcesContent":["import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        if (headers[headerName] == undefined) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n            unsignableHeaders?.has(canonicalHeaderName) ||\n            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\n"],"mappings":"AAAA,SAASA,yBAAyB,EAAEC,oBAAoB,EAAEC,kBAAkB,QAAQ,aAAa;AACjG,OAAO,MAAMC,mBAAmB,GAAG,OAAcC,iBAAiB,EAAEC,eAAe,KAAK;EAAA,IAApD;IAAEC;EAAQ,CAAC;EAC3C,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMC,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,CAACK,IAAI,EAAE,EAAE;IAClD,IAAIL,OAAO,CAACE,UAAU,CAAC,IAAII,SAAS,EAAE;MAClC;IACJ;IACA,MAAMC,mBAAmB,GAAGL,UAAU,CAACM,WAAW,EAAE;IACpD,IAAID,mBAAmB,IAAIb,yBAAyB,IAChDI,iBAAiB,EAAEW,GAAG,CAACF,mBAAmB,CAAC,IAC3CZ,oBAAoB,CAACe,IAAI,CAACH,mBAAmB,CAAC,IAC9CX,kBAAkB,CAACc,IAAI,CAACH,mBAAmB,CAAC,EAAE;MAC9C,IAAI,CAACR,eAAe,IAAKA,eAAe,IAAI,CAACA,eAAe,CAACU,GAAG,CAACF,mBAAmB,CAAE,EAAE;QACpF;MACJ;IACJ;IACAN,SAAS,CAACM,mBAAmB,CAAC,GAAGP,OAAO,CAACE,UAAU,CAAC,CAACS,IAAI,EAAE,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EACpF;EACA,OAAOX,SAAS;AACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}