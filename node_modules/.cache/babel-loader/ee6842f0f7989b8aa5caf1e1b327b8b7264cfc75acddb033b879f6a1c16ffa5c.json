{"ast":null,"code":"export function resolveLogins(logins) {\n  return Promise.all(Object.keys(logins).reduce((arr, name) => {\n    const tokenOrProvider = logins[name];\n    if (typeof tokenOrProvider === \"string\") {\n      arr.push([name, tokenOrProvider]);\n    } else {\n      arr.push(tokenOrProvider().then(token => [name, token]));\n    }\n    return arr;\n  }, [])).then(resolvedPairs => resolvedPairs.reduce((logins, _ref) => {\n    let [key, value] = _ref;\n    logins[key] = value;\n    return logins;\n  }, {}));\n}","map":{"version":3,"names":["resolveLogins","logins","Promise","all","Object","keys","reduce","arr","name","tokenOrProvider","push","then","token","resolvedPairs","key","value"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js"],"sourcesContent":["export function resolveLogins(logins) {\n    return Promise.all(Object.keys(logins).reduce((arr, name) => {\n        const tokenOrProvider = logins[name];\n        if (typeof tokenOrProvider === \"string\") {\n            arr.push([name, tokenOrProvider]);\n        }\n        else {\n            arr.push(tokenOrProvider().then((token) => [name, token]));\n        }\n        return arr;\n    }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins, [key, value]) => {\n        logins[key] = value;\n        return logins;\n    }, {}));\n}\n"],"mappings":"AAAA,OAAO,SAASA,aAAa,CAACC,MAAM,EAAE;EAClC,OAAOC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IACzD,MAAMC,eAAe,GAAGR,MAAM,CAACO,IAAI,CAAC;IACpC,IAAI,OAAOC,eAAe,KAAK,QAAQ,EAAE;MACrCF,GAAG,CAACG,IAAI,CAAC,CAACF,IAAI,EAAEC,eAAe,CAAC,CAAC;IACrC,CAAC,MACI;MACDF,GAAG,CAACG,IAAI,CAACD,eAAe,EAAE,CAACE,IAAI,CAAEC,KAAK,IAAK,CAACJ,IAAI,EAAEI,KAAK,CAAC,CAAC,CAAC;IAC9D;IACA,OAAOL,GAAG;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAACI,IAAI,CAAEE,aAAa,IAAKA,aAAa,CAACP,MAAM,CAAC,CAACL,MAAM,WAAmB;IAAA,IAAjB,CAACa,GAAG,EAAEC,KAAK,CAAC;IACtEd,MAAM,CAACa,GAAG,CAAC,GAAGC,KAAK;IACnB,OAAOd,MAAM;EACjB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}