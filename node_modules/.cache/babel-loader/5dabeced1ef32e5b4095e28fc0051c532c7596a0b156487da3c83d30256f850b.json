{"ast":null,"code":"import { AssumeRoleCommand, STSClient } from \"@aws-sdk/client-sts\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromTemporaryCredentials = options => {\n  let stsClient;\n  return async () => {\n    const params = {\n      ...options.params,\n      RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now()\n    };\n    if (params?.SerialNumber) {\n      if (!options.mfaCodeProvider) {\n        throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n      }\n      params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n    }\n    if (!stsClient) stsClient = new STSClient({\n      ...options.clientConfig,\n      credentials: options.masterCredentials\n    });\n    if (options.clientPlugins) {\n      for (const plugin of options.clientPlugins) {\n        stsClient.middlewareStack.use(plugin);\n      }\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};","map":{"version":3,"names":["AssumeRoleCommand","STSClient","CredentialsProviderError","fromTemporaryCredentials","options","stsClient","params","RoleSessionName","Date","now","SerialNumber","mfaCodeProvider","TokenCode","clientConfig","credentials","masterCredentials","clientPlugins","plugin","middlewareStack","use","Credentials","send","AccessKeyId","SecretAccessKey","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js"],"sourcesContent":["import { AssumeRoleCommand, STSClient } from \"@aws-sdk/client-sts\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromTemporaryCredentials = (options) => {\n    let stsClient;\n    return async () => {\n        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now() };\n        if (params?.SerialNumber) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n            }\n            params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n        }\n        if (!stsClient)\n            stsClient = new STSClient({ ...options.clientConfig, credentials: options.masterCredentials });\n        if (options.clientPlugins) {\n            for (const plugin of options.clientPlugins) {\n                stsClient.middlewareStack.use(plugin);\n            }\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,SAAS,QAAQ,qBAAqB;AAClE,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,MAAMC,wBAAwB,GAAIC,OAAO,IAAK;EACjD,IAAIC,SAAS;EACb,OAAO,YAAY;IACf,MAAMC,MAAM,GAAG;MAAE,GAAGF,OAAO,CAACE,MAAM;MAAEC,eAAe,EAAEH,OAAO,CAACE,MAAM,CAACC,eAAe,IAAI,aAAa,GAAGC,IAAI,CAACC,GAAG;IAAG,CAAC;IACnH,IAAIH,MAAM,EAAEI,YAAY,EAAE;MACtB,IAAI,CAACN,OAAO,CAACO,eAAe,EAAE;QAC1B,MAAM,IAAIT,wBAAwB,CAAE,4DAA2D,GAAI,yCAAwC,EAAE,KAAK,CAAC;MACvJ;MACAI,MAAM,CAACM,SAAS,GAAG,MAAMR,OAAO,CAACO,eAAe,CAACL,MAAM,EAAEI,YAAY,CAAC;IAC1E;IACA,IAAI,CAACL,SAAS,EACVA,SAAS,GAAG,IAAIJ,SAAS,CAAC;MAAE,GAAGG,OAAO,CAACS,YAAY;MAAEC,WAAW,EAAEV,OAAO,CAACW;IAAkB,CAAC,CAAC;IAClG,IAAIX,OAAO,CAACY,aAAa,EAAE;MACvB,KAAK,MAAMC,MAAM,IAAIb,OAAO,CAACY,aAAa,EAAE;QACxCX,SAAS,CAACa,eAAe,CAACC,GAAG,CAACF,MAAM,CAAC;MACzC;IACJ;IACA,MAAM;MAAEG;IAAY,CAAC,GAAG,MAAMf,SAAS,CAACgB,IAAI,CAAC,IAAIrB,iBAAiB,CAACM,MAAM,CAAC,CAAC;IAC3E,IAAI,CAACc,WAAW,IAAI,CAACA,WAAW,CAACE,WAAW,IAAI,CAACF,WAAW,CAACG,eAAe,EAAE;MAC1E,MAAM,IAAIrB,wBAAwB,CAAE,uDAAsDI,MAAM,CAACkB,OAAQ,EAAC,CAAC;IAC/G;IACA,OAAO;MACHC,WAAW,EAAEL,WAAW,CAACE,WAAW;MACpCI,eAAe,EAAEN,WAAW,CAACG,eAAe;MAC5CI,YAAY,EAAEP,WAAW,CAACQ,YAAY;MACtCC,UAAU,EAAET,WAAW,CAACU;IAC5B,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}