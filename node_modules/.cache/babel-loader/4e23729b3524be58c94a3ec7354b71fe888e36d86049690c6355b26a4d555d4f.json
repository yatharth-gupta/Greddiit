{"ast":null,"code":"import { memoize } from \"@aws-sdk/property-provider\";\nimport bowser from \"bowser\";\nimport { DEFAULTS_MODE_OPTIONS } from \"./constants\";\nexport const resolveDefaultsModeConfig = function () {\n  let {\n    defaultsMode\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return memoize(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n      case \"auto\":\n        return Promise.resolve(isMobileBrowser() ? \"mobile\" : \"standard\");\n      case \"mobile\":\n      case \"in-region\":\n      case \"cross-region\":\n      case \"standard\":\n      case \"legacy\":\n        return Promise.resolve(mode?.toLocaleLowerCase());\n      case undefined:\n        return Promise.resolve(\"legacy\");\n      default:\n        throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n  });\n};\nconst isMobileBrowser = () => {\n  const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;\n  const platform = parsedUA?.platform?.type;\n  return platform === \"tablet\" || platform === \"mobile\";\n};","map":{"version":3,"names":["memoize","bowser","DEFAULTS_MODE_OPTIONS","resolveDefaultsModeConfig","defaultsMode","mode","toLowerCase","Promise","resolve","isMobileBrowser","toLocaleLowerCase","undefined","Error","join","parsedUA","window","navigator","userAgent","parse","platform","type"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js"],"sourcesContent":["import { memoize } from \"@aws-sdk/property-provider\";\nimport bowser from \"bowser\";\nimport { DEFAULTS_MODE_OPTIONS } from \"./constants\";\nexport const resolveDefaultsModeConfig = ({ defaultsMode, } = {}) => memoize(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n        case \"auto\":\n            return Promise.resolve(isMobileBrowser() ? \"mobile\" : \"standard\");\n        case \"mobile\":\n        case \"in-region\":\n        case \"cross-region\":\n        case \"standard\":\n        case \"legacy\":\n            return Promise.resolve(mode?.toLocaleLowerCase());\n        case undefined:\n            return Promise.resolve(\"legacy\");\n        default:\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n});\nconst isMobileBrowser = () => {\n    const parsedUA = typeof window !== \"undefined\" && window?.navigator?.userAgent\n        ? bowser.parse(window.navigator.userAgent)\n        : undefined;\n    const platform = parsedUA?.platform?.type;\n    return platform === \"tablet\" || platform === \"mobile\";\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,4BAA4B;AACpD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,qBAAqB,QAAQ,aAAa;AACnD,OAAO,MAAMC,yBAAyB,GAAG;EAAA,IAAC;IAAEC;EAAc,CAAC,uEAAG,CAAC,CAAC;EAAA,OAAKJ,OAAO,CAAC,YAAY;IACrF,MAAMK,IAAI,GAAG,OAAOD,YAAY,KAAK,UAAU,GAAG,MAAMA,YAAY,EAAE,GAAGA,YAAY;IACrF,QAAQC,IAAI,EAAEC,WAAW,EAAE;MACvB,KAAK,MAAM;QACP,OAAOC,OAAO,CAACC,OAAO,CAACC,eAAe,EAAE,GAAG,QAAQ,GAAG,UAAU,CAAC;MACrE,KAAK,QAAQ;MACb,KAAK,WAAW;MAChB,KAAK,cAAc;MACnB,KAAK,UAAU;MACf,KAAK,QAAQ;QACT,OAAOF,OAAO,CAACC,OAAO,CAACH,IAAI,EAAEK,iBAAiB,EAAE,CAAC;MACrD,KAAKC,SAAS;QACV,OAAOJ,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC;MACpC;QACI,MAAM,IAAII,KAAK,CAAE,gDAA+CV,qBAAqB,CAACW,IAAI,CAAC,IAAI,CAAE,SAAQR,IAAK,EAAC,CAAC;IAAC;EAE7H,CAAC,CAAC;AAAA;AACF,MAAMI,eAAe,GAAG,MAAM;EAC1B,MAAMK,QAAQ,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,EAAEC,SAAS,EAAEC,SAAS,GACxEhB,MAAM,CAACiB,KAAK,CAACH,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC,GACxCN,SAAS;EACf,MAAMQ,QAAQ,GAAGL,QAAQ,EAAEK,QAAQ,EAAEC,IAAI;EACzC,OAAOD,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,QAAQ;AACzD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}