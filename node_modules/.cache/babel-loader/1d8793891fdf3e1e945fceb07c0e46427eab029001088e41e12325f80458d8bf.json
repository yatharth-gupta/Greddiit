{"ast":null,"code":"import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = function () {\n  let conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const conditionsReferenceRecord = {};\n  for (const condition of conditions) {\n    const {\n      result,\n      toAssign\n    } = evaluateCondition(condition, {\n      ...options,\n      referenceRecord: {\n        ...options.referenceRecord,\n        ...conditionsReferenceRecord\n      }\n    });\n    if (!result) {\n      return {\n        result\n      };\n    }\n    if (toAssign) {\n      conditionsReferenceRecord[toAssign.name] = toAssign.value;\n      options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n    }\n  }\n  return {\n    result: true,\n    referenceRecord: conditionsReferenceRecord\n  };\n};","map":{"version":3,"names":["debugId","toDebugString","evaluateCondition","evaluateConditions","conditions","options","conditionsReferenceRecord","condition","result","toAssign","referenceRecord","name","value","logger","debug"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js"],"sourcesContent":["import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = (conditions = [], options) => {\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions) {\n        const { result, toAssign } = evaluateCondition(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord,\n            },\n        });\n        if (!result) {\n            return { result };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n        }\n    }\n    return { result: true, referenceRecord: conditionsReferenceRecord };\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,UAAU;AACjD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,OAAO,MAAMC,kBAAkB,GAAG,YAA8B;EAAA,IAA7BC,UAAU,uEAAG,EAAE;EAAA,IAAEC,OAAO;EACvD,MAAMC,yBAAyB,GAAG,CAAC,CAAC;EACpC,KAAK,MAAMC,SAAS,IAAIH,UAAU,EAAE;IAChC,MAAM;MAAEI,MAAM;MAAEC;IAAS,CAAC,GAAGP,iBAAiB,CAACK,SAAS,EAAE;MACtD,GAAGF,OAAO;MACVK,eAAe,EAAE;QACb,GAAGL,OAAO,CAACK,eAAe;QAC1B,GAAGJ;MACP;IACJ,CAAC,CAAC;IACF,IAAI,CAACE,MAAM,EAAE;MACT,OAAO;QAAEA;MAAO,CAAC;IACrB;IACA,IAAIC,QAAQ,EAAE;MACVH,yBAAyB,CAACG,QAAQ,CAACE,IAAI,CAAC,GAAGF,QAAQ,CAACG,KAAK;MACzDP,OAAO,CAACQ,MAAM,EAAEC,KAAK,GAAGd,OAAO,EAAG,WAAUS,QAAQ,CAACE,IAAK,OAAMV,aAAa,CAACQ,QAAQ,CAACG,KAAK,CAAE,EAAC,CAAC;IACpG;EACJ;EACA,OAAO;IAAEJ,MAAM,EAAE,IAAI;IAAEE,eAAe,EAAEJ;EAA0B,CAAC;AACvE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}