{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\nconst defaultOptions = {\n  allowBooleanAttributes: false,\n  //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<' && xmlData[i + 1] === '?') {\n      i += 2;\n      i = readPI(xmlData, i);\n      if (i.err) return i;\n    } else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\\t' && xmlData[i] !== '\\n' && xmlData[i] !== '\\r'; i++) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag', \"Expected closing tag '\" + otg.tagName + \"' (opened in line \" + openPos.line + \", col \" + openPos.col + \") instead of closing tag '\" + tagName + \"'.\", getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if (options.unpairedTags.indexOf(tagName) !== -1) {\n            //don't push into stack\n          } else {\n            tags.push({\n              tagName,\n              tagStartPos\n            });\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i + 1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1) return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          } else {\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\" + xmlData[i] + \"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length == 1) {\n    return getErrorObject('InvalidTag', \"Unclosed tag '\" + tags[0].tagName + \"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\" + JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '') + \"' found.\", {\n      line: 1,\n      col: 1\n    });\n  }\n  return true;\n};\nfunction isWhiteSpace(char) {\n  return char === ' ' || char === '\\t' || char === '\\n' || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n  return i;\n}\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' has no space in starting.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n  return true;\n}\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';') return i;\n    if (!xmlData[i].match(re)) break;\n  }\n  return -1;\n}\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';') return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20) continue;\n    if (xmlData[i] === ';') break;\n    return -1;\n  }\n  return i;\n}\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col\n    }\n  };\n}\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}","map":{"version":3,"names":["util","require","defaultOptions","allowBooleanAttributes","unpairedTags","exports","validate","xmlData","options","Object","assign","tags","tagFound","reachedRoot","substr","i","length","readPI","err","tagStartPos","readCommentAndCDATA","closingTag","tagName","trim","substring","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","value","index","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","push","afterAmp","validateAmpersand","isWhiteSpace","JSON","stringify","map","t","replace","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","validAttrStrRegxp","RegExp","matches","getAllMatches","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","validateNumberAmpersand","re","match","count","message","lineNumber","isName","lines","split","startIndex"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/fast-xml-parser/src/validator.js"],"sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}