{"ast":null,"code":"const alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n  const char = String.fromCharCode(i + start);\n  alphabetByEncoding[char] = i;\n  alphabetByValue[i] = char;\n}\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n  const char = String.fromCharCode(i + start);\n  const index = i + 26;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\nfor (let i = 0; i < 10; i++) {\n  alphabetByEncoding[i.toString(10)] = i + 52;\n  const char = i.toString(10);\n  const index = i + 52;\n  alphabetByEncoding[char] = index;\n  alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };","map":{"version":3,"names":["alphabetByEncoding","alphabetByValue","Array","i","start","charCodeAt","limit","char","String","fromCharCode","index","toString","bitsPerLetter","bitsPerByte","maxLetterValue"],"sources":["/home/yatharth/Desktop/sem_4/DASS/assignment_1/my-app/node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js"],"sourcesContent":["const alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor (let i = 0; i < 10; i++) {\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };\n"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,CAAC,CAAC;AAC7B,MAAMC,eAAe,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC;AACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,CAAC,GAAGC,KAAK,IAAIE,KAAK,EAAEH,CAAC,EAAE,EAAE;EAC3F,MAAMI,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,CAAC,GAAGC,KAAK,CAAC;EAC3CJ,kBAAkB,CAACO,IAAI,CAAC,GAAGJ,CAAC;EAC5BF,eAAe,CAACE,CAAC,CAAC,GAAGI,IAAI;AAC7B;AACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,CAAC,GAAGC,KAAK,IAAIE,KAAK,EAAEH,CAAC,EAAE,EAAE;EAC3F,MAAMI,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,CAAC,GAAGC,KAAK,CAAC;EAC3C,MAAMM,KAAK,GAAGP,CAAC,GAAG,EAAE;EACpBH,kBAAkB,CAACO,IAAI,CAAC,GAAGG,KAAK;EAChCT,eAAe,CAACS,KAAK,CAAC,GAAGH,IAAI;AACjC;AACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;EACzBH,kBAAkB,CAACG,CAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAGR,CAAC,GAAG,EAAE;EAC3C,MAAMI,IAAI,GAAGJ,CAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC;EAC3B,MAAMD,KAAK,GAAGP,CAAC,GAAG,EAAE;EACpBH,kBAAkB,CAACO,IAAI,CAAC,GAAGG,KAAK;EAChCT,eAAe,CAACS,KAAK,CAAC,GAAGH,IAAI;AACjC;AACAP,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzBD,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzB,MAAMW,aAAa,GAAG,CAAC;AACvB,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,cAAc,GAAG,QAAQ;AAC/B,SAASd,kBAAkB,EAAEC,eAAe,EAAEW,aAAa,EAAEC,WAAW,EAAEC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}